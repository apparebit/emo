% \iffalse meta-comment
%
% emo•ji for all (LaTeX engines)
% (C) Copyright 2023 by Robert Grimm
% Released under LPPL v1.3c or later
% <https://github.com/apparebit/emo>
%
% \fi
% ^^A ----------------------------------------------------------------------------------
% \iffalse
%<*scaffold>
\iffalse
%</scaffold>
% ======================================================================================
%<*readme>
# emo•ji for all (LaTeX engines)

This package defines the `\emo{<emoji-name>}` macro for including color emoji in
a document no matter the LaTeX engine. It uses the Noto color emoji font if the
engine supports doing so and falls back onto PDF graphics otherwise. In either
case, `\emo{desert-island}` results in 🏝 and `\emo{parrot}` results in 🦜. Emo
may come in particularly handy when dealing with academic publishers that
provide only minimal support for non-Latin scripts (cough,
[ACM](https://www.acm.org), cough).

Emo's source repository is <https://github.com/apparebit/emo>. It also is
available [through CTAN](https://ctan.org/pkg/emo). Emo supports conversion to
HTML with [LaTeXML](https://github.com/brucemiller/LaTeXML) or
[TeX4ht](https://tug.org/tex4ht/). When using the latter tool, please be sure to
use |make4ht -l| as invocation.


## Package Options

When emo is used with the `extra` option, this package also defines the
`\lingchi` and `\YHWH` macros for 凌遲 and יהוה, respectively. Both macros
preserve a subsequent space as space, no backslash needed.

When used with the `index` option, this package also emits a raw index entry for
each use of an emoji into an emo index or `.edx` file.


## Installation

To **extract files** embedded in [emo.dtx](emo.dtx), run `pdftex emo.dtx`. Note
that plain old `tex` won't do, since it mangles this README. `pdflatex` works,
but also generates the package documentation. The embedded files are `build.sh`,
`emo.ins`, `emo.sty`, `emo.sty.ltxml`, `emo-support.sty`, `canary.tex`,
`demo.tex`, and `README.md`.

To **run emo's tests and build its documentation**, make `build.sh` executable
by invoking `chmod +x build.sh` and then run `./build.sh`, which:
  * Tests emo on pdfTeX, XeTeX, and LuaTeX—see [canary.pdf](canary.pdf);
  * Tests emo with LaTeXML and TeX4ht—see [demo.html](demo.html);
  * Builds the documentation with indices—see [emo.pdf](emo.pdf).

To **configure the emoji**, run `python3 config/emo.py` with appropriate
arguments. The [package documentation](emo.pdf) explains the configuration tool
in detail, but you may find the `-h` for help option sufficient to get started.

To **install this package**, place `emo.def`, `emo.sty`, `emo.sty.ltxml`,
`emo-lingchi.ttf`, and the `emo-graphics` directory with the fallback PDF files
somewhere where LaTeX can find them. In a pinch, your project directory will do.


## Supported Emoji

By default, emo supports all of the emoji listed below. In order of Unicode's
emoji groups, emo's pre-configured emoji include:

  * All emoji in Unicode's *Smileys & Emotion* group;
  * All emoji in the *People & Body* group that do *not* override gender, hair,
    or skin color;
  * All emoji in the *Animals & Nature*, *Food & Drink*, *Travel & Places*,
    *Activities*,  *Objects*, and *Symbols* groups;
  * All emoji in the *flag* subgroup of the *Flags* group;
  * The EU flag.

In Unicode display order, that's the following 1,415 out of 3,655 possible emoji
as of Unicode 15.0:

😀 😃 😄 😁 😆 😅 🤣 😂 🙂 🙃 🫠 😉 😊 😇 🥰 😍 🤩 😘 😗 ☺️ 😚 😙 🥲 😋 😛 😜 🤪
😝 🤑 🤗 🤭 🫢 🫣 🤫 🤔 🫡 🤐 🤨 😐 😑 😶 🫥 😶‍🌫️ 😏 😒 🙄 😬 😮‍💨 🤥 🫨 😌
😔 😪 🤤 😴 😷 🤒 🤕 🤢 🤮 🤧 🥵 🥶 🥴 😵 😵‍💫 🤯 🤠 🥳 🥸 😎 🤓 🧐 😕 🫤 😟 🙁
☹️ 😮 😯 😲 😳 🥺 🥹 😦 😧 😨 😰 😥 😢 😭 😱 😖 😣 😞 😓 😩 😫 🥱 😤 😡 😠 🤬 😈
👿 💀 ☠️ 💩 🤡 👹 👺 👻 👽 👾 🤖 😺 😸 😹 😻 😼 😽 🙀 😿 😾 🙈 🙉 🙊 💌 💘 💝 💖
💗 💓 💞 💕 💟 ❣️ 💔 ❤️‍🔥 ❤️‍🩹 ❤️ 🩷 🧡 💛 💚 💙 🩵 💜 🤎 🖤 🩶 🤍 💋 💯 💢 💥
💫 💦 💨 🕳️ 💬 👁️‍🗨️ 🗨️ 🗯️ 💭 💤 👋 🤚 🖐️ ✋ 🖖 🫱 🫲 🫳 🫴 🫷 🫸 👌 🤌 🤏
✌️ 🤞 🫰 🤟 🤘 🤙 👈 👉 👆 🖕 👇 ☝️ 🫵 👍 👎 ✊ 👊 🤛 🤜 👏 🙌 🫶 👐 🤲 🤝 🙏 ✍️
💅 🤳 💪 🦾 🦿 🦵 🦶 👂 🦻 👃 🧠 🫀 🫁 🦷 🦴 👀 👁️ 👅 👄 🫦 👶 🧒 👦 👧 🧑 👱
🧔 🧓 🙍 🙎 🙅 🙆 💁 🙋 🧏 🙇 🤦 🤷 🧑‍⚕️ 🧑‍🎓 🧑‍🏫 🧑‍⚖️ 🧑‍🌾 🧑‍🍳 🧑‍🔧
🧑‍🏭 🧑‍💼 🧑‍🔬 🧑‍💻 🧑‍🎤 🧑‍🎨 🧑‍✈️ 🧑‍🚀 🧑‍🚒 👮 🕵️ 💂 🥷 👷 🫅 🤴 👸
👳 👲 🤵 👰 🫄 🤱 🧑‍🍼 👼 🎅 🤶 🧑‍🎄 🦸 🦹 🧙 🧚 🧛 🧜 🧜‍♂️ 🧜‍♀️ 🧝 🧞 🧟 🧌
💆 💇 🚶 🧍 🧎 🧑‍🦯 🧑‍🦼 🧑‍🦽 🏃 🕴️ 👯 👯‍♂️ 👯‍♀️ 🧖 🧗 🤺 🏇 ⛷️ 🏂 🏌️ 🏄
🚣 🏊 ⛹️ 🏋️ 🚴 🚵 🤸 🤼 🤼‍♂️ 🤼‍♀️ 🤽 🤾 🤹 🧘 🛀 🛌 🧑‍🤝‍🧑 👭 👬 💏 💑 👪
🗣️ 👤 👥 🫂 👣 🐵 🐒 🦍 🦧 🐶 🐕 🦮 🐕‍🦺 🐩 🐺 🦊 🦝 🐱 🐈 🐈‍⬛ 🦁 🐯 🐅 🐆 🐴
🫎 🫏 🐎 🦄 🦓 🦌 🦬 🐮 🐂 🐃 🐄 🐷 🐖 🐗 🐽 🐏 🐑 🐐 🐪 🐫 🦙 🦒 🐘 🦣 🦏 🦛 🐭
🐁 🐀 🐹 🐰 🐇 🐿️ 🦫 🦔 🦇 🐻 🐻‍❄️ 🐨 🐼 🦥 🦦 🦨 🦘 🦡 🐾 🦃 🐔 🐓 🐣 🐤 🐥
🐦 🐧 🕊️ 🦅 🦆 🦢 🦉 🦤 🪶 🦩 🦚 🦜 🪽 🐦‍⬛ 🪿 🐸 🐊 🐢 🦎 🐍 🐲 🐉 🦕 🦖 🐳 🐋
🐬 🦭 🐟 🐠 🐡 🦈 🐙 🐚 🪸 🪼 🐌 🦋 🐛 🐜 🐝 🪲 🐞 🦗 🪳 🕷️ 🕸️ 🦂 🦟 🪰 🪱 🦠
💐 🌸 💮 🪷 🏵️ 🌹 🥀 🌺 🌻 🌼 🌷 🪻 🌱 🪴 🌲 🌳 🌴 🌵 🌾 🌿 ☘️ 🍀 🍁 🍂 🍃 🪹
🪺 🍄 🍇 🍈 🍉 🍊 🍋 🍌 🍍 🥭 🍎 🍏 🍐 🍑 🍒 🍓 🫐 🥝 🍅 🫒 🥥 🥑 🍆 🥔 🥕 🌽
🌶️ 🫑 🥒 🥬 🥦 🧄 🧅 🥜 🫘 🌰 🫚 🫛 🍞 🥐 🥖 🫓 🥨 🥯 🥞 🧇 🧀 🍖 🍗 🥩 🥓 🍔
🍟 🍕 🌭 🥪 🌮 🌯 🫔 🥙 🧆 🥚 🍳 🥘 🍲 🫕 🥣 🥗 🍿 🧈 🧂 🥫 🍱 🍘 🍙 🍚 🍛 🍜 🍝
🍠 🍢 🍣 🍤 🍥 🥮 🍡 🥟 🥠 🥡 🦀 🦞 🦐 🦑 🦪 🍦 🍧 🍨 🍩 🍪 🎂 🍰 🧁 🥧 🍫 🍬 🍭
🍮 🍯 🍼 🥛 ☕ 🫖 🍵 🍶 🍾 🍷 🍸 🍹 🍺 🍻 🥂 🥃 🫗 🥤 🧋 🧃 🧉 🧊 🥢 🍽️ 🍴 🥄 🔪
🫙 🏺 🌍 🌎 🌏 🌐 🗺️ 🗾 🧭 🏔️ ⛰️ 🌋 🗻 🏕️ 🏖️ 🏜️ 🏝️ 🏞️ 🏟️ 🏛️ 🏗️ 🧱 🪨
🪵 🛖 🏘️ 🏚️ 🏠 🏡 🏢 🏣 🏤 🏥 🏦 🏨 🏩 🏪 🏫 🏬 🏭 🏯 🏰 💒 🗼 🗽 ⛪ 🕌 🛕 🕍
⛩️ 🕋 ⛲ ⛺ 🌁 🌃 🏙️ 🌄 🌅 🌆 🌇 🌉 ♨️ 🎠 🛝 🎡 🎢 💈 🎪 🚂 🚃 🚄 🚅 🚆 🚇 🚈 🚉
🚊 🚝 🚞 🚋 🚌 🚍 🚎 🚐 🚑 🚒 🚓 🚔 🚕 🚖 🚗 🚘 🚙 🛻 🚚 🚛 🚜 🏎️ 🏍️ 🛵 🦽 🦼
🛺 🚲 🛴 🛹 🛼 🚏 🛣️ 🛤️ 🛢️ ⛽ 🛞 🚨 🚥 🚦 🛑 🚧 ⚓ 🛟 ⛵ 🛶 🚤 🛳️ ⛴️ 🛥️ 🚢 ✈️
🛩️ 🛫 🛬 🪂 💺 🚁 🚟 🚠 🚡 🛰️ 🚀 🛸 🛎️ 🧳 ⌛ ⏳ ⌚ ⏰ ⏱️ ⏲️ 🕰️ 🕛 🕧 🕐 🕜 🕑 🕝
🕒 🕞 🕓 🕟 🕔 🕠 🕕 🕡 🕖 🕢 🕗 🕣 🕘 🕤 🕙 🕥 🕚 🕦 🌑 🌒 🌓 🌔 🌕 🌖 🌗 🌘 🌙
🌚 🌛 🌜 🌡️ ☀️ 🌝 🌞 🪐 ⭐ 🌟 🌠 🌌 ☁️ ⛅ ⛈️ 🌤️ 🌥️ 🌦️ 🌧️ 🌨️ 🌩️ 🌪️ 🌫️ 🌬️
🌀 🌈 🌂 ☂️ ☔ ⛱️ ⚡ ❄️ ☃️ ⛄ ☄️ 🔥 💧 🌊 🎃 🎄 🎆 🎇 🧨 ✨ 🎈 🎉 🎊 🎋 🎍 🎎 🎏 🎐
🎑 🧧 🎀 🎁 🎗️ 🎟️ 🎫 🎖️ 🏆 🏅 🥇 🥈 🥉 ⚽ ⚾ 🥎 🏀 🏐 🏈 🏉 🎾 🥏 🎳 🏏 🏑 🏒
🥍 🏓 🏸 🥊 🥋 🥅 ⛳ ⛸️ 🎣 🤿 🎽 🎿 🛷 🥌 🎯 🪀 🪁 🔫 🎱 🔮 🪄 🎮 🕹️ 🎰 🎲 🧩 🧸
🪅 🪩 🪆 ♠️ ♥️ ♦️ ♣️ ♟️ 🃏 🀄 🎴 🎭 🖼️ 🎨 🧵 🪡 🧶 🪢 👓 🕶️ 🥽 🥼 🦺 👔 👕 👖
🧣 🧤 🧥 🧦 👗 👘 🥻 🩱 🩲 🩳 👙 👚 🪭 👛 👜 👝 🛍️ 🎒 🩴 👞 👟 🥾 🥿 👠 👡 🩰
👢 🪮 👑 👒 🎩 🎓 🧢 🪖 ⛑️ 📿 💄 💍 💎 🔇 🔈 🔉 🔊 📢 📣 📯 🔔 🔕 🎼 🎵 🎶 🎙️
🎚️ 🎛️ 🎤 🎧 📻 🎷 🪗 🎸 🎹 🎺 🎻 🪕 🥁 🪘 🪇 🪈 📱 📲 ☎️ 📞 📟 📠 🔋 🪫 🔌 💻
🖥️ 🖨️ ⌨️ 🖱️ 🖲️ 💽 💾 💿 📀 🧮 🎥 🎞️ 📽️ 🎬 📺 📷 📸 📹 📼 🔍 🔎 🕯️ 💡 🔦
🏮 🪔 📔 📕 📖 📗 📘 📙 📚 📓 📒 📃 📜 📄 📰 🗞️ 📑 🔖 🏷️ 💰 🪙 💴 💵 💶 💷 💸
💳 🧾 💹 ✉️ 📧 📨 📩 📤 📥 📦 📫 📪 📬 📭 📮 🗳️ ✏️ ✒️ 🖋️ 🖊️ 🖌️ 🖍️ 📝 💼 📁
📂 🗂️ 📅 📆 🗒️ 🗓️ 📇 📈 📉 📊 📋 📌 📍 📎 🖇️ 📏 📐 ✂️ 🗃️ 🗄️ 🗑️ 🔒 🔓 🔏
🔐 🔑 🗝️ 🔨 🪓 ⛏️ ⚒️ 🛠️ 🗡️ ⚔️ 💣 🪃 🏹 🛡️ 🪚 🔧 🪛 🔩 ⚙️ 🗜️ ⚖️ 🦯 🔗 ⛓️ 🪝
🧰 🧲 🪜 ⚗️ 🧪 🧫 🧬 🔬 🔭 📡 💉 🩸 💊 🩹 🩼 🩺 🩻 🚪 🛗 🪞 🪟 🛏️ 🛋️ 🪑 🚽 🪠
🚿 🛁 🪤 🪒 🧴 🧷 🧹 🧺 🧻 🪣 🧼 🫧 🪥 🧽 🧯 🛒 🚬 ⚰️ 🪦 ⚱️ 🧿 🪬 🗿 🪧 🪪 🏧 🚮
🚰 ♿ 🚹 🚺 🚻 🚼 🚾 🛂 🛃 🛄 🛅 ⚠️ 🚸 ⛔ 🚫 🚳 🚭 🚯 🚱 🚷 📵 🔞 ☢️ ☣️ ⬆️ ↗️ ➡️
↘️ ⬇️ ↙️ ⬅️ ↖️ ↕️ ↔️ ↩️ ↪️ ⤴️ ⤵️ 🔃 🔄 🔙 🔚 🔛 🔜 🔝 🛐 ⚛️ 🕉️ ✡️ ☸️ ☯️ ✝️ ☦️
☪️ ☮️ 🕎 🔯 🪯 ♈ ♉ ♊ ♋ ♌ ♍ ♎ ♏ ♐ ♑ ♒ ♓ ⛎ 🔀 🔁 🔂 ▶️ ⏩ ⏭️ ⏯️ ◀️ ⏪ ⏮️ 🔼 ⏫ 🔽 ⏬
⏸️ ⏹️ ⏺️ ⏏️ 🎦 🔅 🔆 📶 🛜 📳 📴 ♀️ ♂️ ⚧️ ✖️ ➕ ➖ ➗ 🟰 ♾️ ‼️ ⁉️ ❓ ❔ ❕ ❗ 〰️ 💱 💲
⚕️ ♻️ ⚜️ 🔱 📛 🔰 ⭕ ✅ ☑️ ✔️ ❌ ❎ ➰ ➿ 〽️ ✳️ ✴️ ❇️ ©️ ®️ ™️ #️⃣ *️⃣ 0️⃣ 1️⃣ 2️⃣
3️⃣ 4️⃣ 5️⃣ 6️⃣ 7️⃣ 8️⃣ 9️⃣ 🔟 🔠 🔡 🔢 🔣 🔤 🅰️ 🆎 🅱️ 🆑 🆒 🆓 ℹ️ 🆔 Ⓜ️ 🆕 🆖
🅾️ 🆗 🅿️ 🆘 🆙 🆚 🈁 🈂️ 🈷️ 🈶 🈯 🉐 🈹 🈚 🈲 🉑 🈸 🈴 🈳 ㊗️ ㊙️ 🈺 🈵 🔴 🟠
🟡 🟢 🔵 🟣 🟤 ⚫ ⚪ 🟥 🟧 🟨 🟩 🟦 🟪 🟫 ⬛ ⬜ ◼️ ◻️ ◾ ◽ ▪️ ▫️ 🔶 🔷 🔸 🔹 🔺 🔻 💠
🔘 🔳 🔲 🏁 🚩 🎌 🏴 🏳️ 🏳️‍🌈 🏳️‍⚧️ 🏴‍☠️ 🇪🇺

The [package documentation](emo.pdf) explains the underlying naming scheme. It
also explains how to update the configuration with the [emo.py](config.emo.py)
script, which takes care of most heavy lifting by downloading the sources for
Noto color emoji, converting SVG into PDF graphics compatible with pdfTeX and
XeTeX, and generating up-to-date `emo.def` files.


## Copyright and Licensing

This package combines code written in LaTeX, Python, and Perl with Unicode data
about emoji as well as graphics and fonts derived from Google's Noto fonts. As a
result, a number of different licenses apply, all of which are [OSI
approved](https://opensource.org/licenses/) and non-copyleft:

  * This package's [LaTeX code](emo.dtx) is © Copyright 2023 by Robert Grimm and
    has been released under the [LPPL
    v1.3c](https://www.latex-project.org/lppl/lppl-1-3c/) or later.
  * The [emo.py](config/emo.py) configuration script also is © Copyright 2023 by
    Robert Grimm but has been released under the [Apache 2.0
    license](https://www.apache.org/licenses/LICENSE-2.0).
  * The [emoji-test.txt](config/emoji-test.txt) configuration file is a data
    file from [Unicode TR-51](https://unicode.org/reports/tr51/) and hence
    subject to the [Unicode License](https://www.unicode.org/license.txt).
  * The `emo-lingchi.ttf` font is a two-glyph subset of the serif traditional
    Chinese version of Google's [Noto
    fonts](https://github.com/notofonts/noto-cjk) and hence subject to the [SIL
    Open Font License v1.1](https://scripts.sil.org/ofl).
  * The PDF graphics in the `emo-graphics` directory are derived from the
    sources for [Noto's color emoji](https://github.com/googlefonts/noto-emoji)
    and hence subject to the Apache 2.0 license.

%</readme>
% --------------------------------------------------------------------------------------
%<*buildscript>
#!/bin/bash

if [[ -z ${NOCOLOR} ]] && [ -t 2 ]; then
    EXTRA="\e[1m"
    ERROR="\e[1;31m"
    WARN="\e[1;38;5;208m"
    INFO="\e[1;34m"
    RESET="\e[0m"
else
    EXTRA=""
    ERROR=""
    WARN=""
    INFO=""
    RESET=""
fi

log() {
    eval "STYLE=\"\${$1}\""
    printf "${STYLE}$1 $2 ${RESET}\n" >&2
}

log_help() {
    log EXTRA "Invoke as \'./build.sh [<cmd>]\' with <cmd> one of these:"
    log EXTRA "    test    -- run emo's cross-engine tests"
    log EXTRA "    html    -- run emo's HTML conversions"
    log EXTRA "    docs    -- build emo's documentation on pdfTeX"
    log EXTRA "    all     -- execute test, html, and docs in that order (default)"
    log EXTRA "    luadocs -- build emo's documentation on LuaTeX"
    log EXTRA "    luaall  -- execute test, html, and luadocs in that order"
}

if [[ -z ${BASH} ]]; then
    log ERROR "It looks like you source'd this script; please run it instead"
    log EXTRA '$ chmod +x build.sh'
    log EXTRA '$ ./build.sh'
    return 1
fi

test-with-engine() {
    log INFO "Test with $1"
    "$1" -jobname=$1-canary -interaction=batchmode canary
    if [ $? -ne 0 ]; then
        log ERROR "$1 failed to compile 'canary.tex'"
        exit 1
    fi
}

test() {
    test-with-engine pdflatex
    test-with-engine xelatex
    test-with-engine lualatex
    pdfunite pdflatex-canary.pdf xelatex-canary.pdf lualatex-canary.pdf canary.pdf
    log INFO 'Be sure to inspect "canary.pdf"!'
}

html() {
    log INFO "Convert to HTML with LaTeXML"
    # LaTeXML: --includestyles handles emo-supprt package
    latexmlc --includestyles --dest=demo-latexml.html demo.tex
    if [ $? -ne 0 ]; then
        log ERROR "latexml failed to convert 'demo.tex' to HTML"
        exit 1
    fi

    # Remove run date comment and footer. The latter is just plain tacky.
    sed -i '' '/^<!--Generated on /d' ./demo-latexml.html
    sed -i '' '/^<footer class="ltx_page_footer">/{N;N;d;}' ./demo-latexml.html

    log INFO "Convert to HTML with TeX4ht"
    # TeX4ht: -l is necessary for selecting LuaTeX engine
    make4ht -l -j demo-tex4ht demo.tex
    if [ $? -ne 0 ]; then
        log ERROR "tex4ht failed to convert 'demo.tex' to HTML"
        exit 1
    fi

    log INFO 'Be sure to inspect "demo.html"!'
}

build-docs() {
    log INFO "Build documentation with $1"
    $1 -interaction=batchmode emo.dtx
    if [ $? -ne 0 ]; then
        log ERROR "$1 failed to compile 'emo.dtx'"
        exit 1
    fi
}

docs() {
    build-docs "$1"
    log INFO "Make indices"
    makeindex -s gind.ist -o emo.ind emo.idx
    makeindex -s gglo.ist -o emo.gls emo.glo
    build-docs "$1"
    build-docs "$1"
}

target=${1:-all}
case $target in
    test    )  test ;;
    html    )  html ;;
    docs    )  docs pdflatex ;;
    luadocs )  docs lualatex ;;
    all  )
        test
        html
        docs pdflatex
        ;;
    luaall  )
        test
        html
        docs lualatex
        ;;
    *       )
        log ERROR "Unknown command \'${target}\'!"
        log_help
        exit 1
        ;;
esac
%</buildscript>
% ======================================================================================
%<*scaffold>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
    \expandafter\begingroup
\fi
%</scaffold>
% --------------------------------------------------------------------------------------
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble

emo•ji for all (LaTeX engines)
(C) Copyright 2023 by Robert Grimm
Released under LPPL v1.3c or later
<https://github.com/apparebit/emo>

\endpreamble
\usedir{tex/latex/emo}
\generate{
    \file{\jobname.sty}{\from{\jobname.dtx}{package}}}
\generate{
    \nopreamble\nopostamble
    \file{\jobname.sty.ltxml}{\from{\jobname.dtx}{latexml-binding}}}
%</install>
%<install>\endbatchfile
% --------------------------------------------------------------------------------------
%<*scaffold>
\usedir{source/latex/emo}
\generate{\file{\jobname.ins}{\from{\jobname.dtx}{install}}}
\generate{\file{emo-support.sty}{\from{\jobname.dtx}{support}}}
\generate{\file{canary.tex}{\from{\jobname.dtx}{canary}}}
\generate{\file{demo.tex}{\from{\jobname.dtx}{oneliner}}}
\nopreamble\nopostamble
\usedir{source/latex/emo}
\generate{\file{build.sh}{\from{\jobname.dtx}{buildscript}}}
\usedir{doc/latex/emo}
\generate{\file{README.md}{\from{\jobname.dtx}{readme}}}
\ifx\fmtname\nameofplainTeX
    \expandafter\endbatchfile
\else
    \expandafter\endgroup
\fi
%</scaffold>
% ======================================================================================
% See https://tug.org/TUGboat/tb29-2/tb92pakin.pdf.
%<*scaffold>
\ProvidesFile{emo.dtx}
%</scaffold>
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\ProvidesPackage{emo}
%<*scaffold,package>
    [2023/99/99 v1.0 emo•ji for all (LaTeX engines)]
%</scaffold,package>
% ======================================================================================
%<*driver>
\PassOptionsToPackage{utf8}{inputenc}
\documentclass{ltxdoc}
% Override the default \small, which looks odd typeset in Inconsolata.
\renewcommand{\MacroFont}{\normalsize\ttfamily}
\usepackage{emo-support}
\usepackage{enumitem}
\usepackage{parskip}
\usepackage{multicol}
\usepackage{xcolor}
\usepackage{hyperref}
%\usepackage{lua-visual-debug}
\definecolor{spot}{HTML}{353598}
\hypersetup{allcolors=spot}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
    \DocInput{\jobname.dtx}
\end{document}
%</driver>
% ======================================================================================
% \fi
%
% \changes{0.1}{}{Make initial release}
% \changes{0.2}{}{Prefix font and graphic files with ``{\tt emo-}''}
% \changes{0.2}{}{Support {\tt pdftex} for extracting {\tt emo.dtx}}
% \changes{0.3}{}{Support TeX4ht for conversion to HTML}
% \changes{0.4}{}{Automate testing across engines with {\tt canary.tex}}
% \changes{1.0}{}{Use LaTeX hooks for handling engines and options}
%
% \GetFileInfo{\jobname.dtx}
%
% \newlist{inlinenum}{enumerate*}{1}
% \setlist[inlinenum]{label=(\alph{inlinenumi})}
% \newenvironment{verbatimish}{%
%     \ttfamily%
%     \obeylines%
%     \obeyspaces%
%     \vspace{\the\parskip}%
%     \setlength{\parskip}{0pt}%
%     \setlength{\parindent}{1em}%
% }{}
%
% \title{emo•ji for all\\(LaTeX engines)}
% \author{\href{https://apparebit.com}{Robert Grimm}}
% \date{Version \fileversion\ (\filedate)}
%
% \maketitle
%
% \begin{abstract}
% \noindent{}Emo implements the |\emo|\marg{emoji-name} command for including
% color emoji such as |\emo{desert-island}| for \emo{desert-island} or
% |\emo{parrot}| for \emo{parrot} in your documents independent of LaTeX engine.
% The implementation uses the Noto color emoji font if the engine supports it
% and includes PDF graphics otherwise. It also supports conversion to HTML with
% either LaTeXML or TeX4ht. Next, PDF graphics are automatically derived from
% Noto's SVG sources, so the visual appearance is very similar. The source
% repository is at \url{https://github.com/apparebit/emo}. Emo may come in
% particularly handy when dealing with academic publishers that provide only
% minimal support for non-Latin scripts (cough,
% \href{https://authors.acm.org/proceedings/production-information/accepted-latex-packages}{ACM},
% cough).
% \end{abstract}
%
% \tableofcontents
%
%
% ^^A ==================================================================================
% \section{Installation}
%
% The emo package is available through its
% \href{https://github.com/apparebit/emo}{source repository} or through
% \href{https://ctan.org/pkg/emo}{CTAN}. Installation is fairly
% straightforward, though it does involve a lot more files than usual.
%
% \begin{enumerate}
% \item Start by extracting this package's files from |emo.dtx| by running:
% \begin{verbatimish}
%     \$ pdftex emo.dtx
% \end{verbatimish}
% Do \emph{not} use |tex|; it mangles the embedded |README.md|. |pdflatex| also
% extracts the files and then builds the documentation. Embedded files are
% |build.sh|, |emo.ins|, |emo.sty|, |emo.sty.ltxml|, |emo-support.sty|,
% |canary.tex|, |demo.tex|, and |README.md|. Extraction will overwrite existing
% files with the same name without asking.
%
% \item Test the package and build its documentation by making |build.sh|
% executable and then running it:
% \begin{verbatimish}
%      \$ chmod +x build.sh; ./build.sh
% \end{verbatimish}
%
% The shell script does three things: First, it tests emo by compiling
% |canary.tex| with pdfTex, XeTeX, as well as LuaTeX and generating |canary.pdf|
% with the results from the three tests. Second, it tests emo by compiling
% |demo.tex| with LaTeXML as well as TeX4ht and generating |demo-latexml.html|
% as well as |demo-tex4ht.html|, which are framed together by |demo.html|.
% Third, it builds the package documentation in |emo.pdf| with all bells and
% indices.
%
% \item Get started reconfiguring supported emoji by running:
% \begin{verbatimish}
%     \$ python config/emo.py -h
% \end{verbatimish}
% For more detailed instructions, see \S\ref{sec:config} below.
%
% \item Put the following files somewhere LaTeX can find them. In a pinch, your
% current project's directory will do. However, emo's installation potentially
% comprises thousands of files. So, you probably want to use a dedicated
% directory and add that to the search path for LaTeX, e.g., by setting the
% |TEXINPUTS| environment variable.
% \begin{enumerate}
% \item |emo.sty| with the package implementation;
% \item |emo.sty.ltxml| with the binding for
%     \href{https://github.com/brucemiller/LaTeXML}{LaTeXML};
% \item |emo.def| with the emoji table;
% \item |emo-lingchi.ttf| with the two glyphs for |\lingchi|;
% \item |emo-graphics| with the fallback PDF graphics.
% \end{enumerate}
% TeX Live requires that each package's files have unique names. For that
% reason, the PDF graphics in the |emo-graphics| directory start with the |emo-|
% prefix as well.
%
% \end{enumerate}
%
% When running on the LuaLaTeX engine, the emo package also uses the Noto color
% emoji (|NotoColorEmoji.ttf|) and Linux Libertine (|LinLibertine_R.otf|) fonts,
% with the latter used for rendering |\YHWH| only. Neither file is included with
% emo's distribution, since both of them are distributed with major TeX
% distributions already. If they are not included with your LaTeX distribution,
% you can find them on CTAN. The |emo-lingchi.ttf| font distributed with emo is
% a two glyph subset of |NotoSerifTC-Regular.otf|, i.e., the traditional Chinese
% version of Noto serif.
%
%
% ^^A ==================================================================================
% \section{Usage}
%
% As usual, you declare your document's dependency on emo with
% |\usepackage{emo}|. In addition to the unadorned form, emo takes up to two
% options:
% \begin{description}
% \item[extra] Also define the |\lingchi| and |\YHWH| macros, which produce
%     \lingchi\ and \YHWH.
% \item[index] Create an emoji index tagged |emo| with the |.edx| extension for
%     the raw index and the |.end| extension for the processed index. This
%     option relies on the |index| package, generates the raw |.edx| file,
%     but does not build or use the processed index.
% \end{description}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{One Main Macro}
% \DescribeMacro{\emo}
% An |\emo|\marg{emoji-name} invocation expands to the named emoji. For
% LuaLaTeX, it uses the Noto color emoji font. For all other engines, it uses
% PDF graphics. That way, |\emo{desert-island}| results in~\emo{desert-island}
% and |\emo{parrot}| results in~\emo{parrot}.
%
% Since LaTeX tends to produce a lot of command line noise about underfull boxes
% and loaded fonts, it's a easy to miss meaningful warnings. For that reason,
% |\emo| expands to an attention-seeking error message upon undefined emoji
% names. For example, |\emo{boo}| produces \emo{boo}.
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsubsection{Naming Scheme}
%
% With a few exceptions, emo's names for emoji are automatically derived from
% their Unicode names, with letters converted to lowercase, punctuation such as
% commas, colons, quotes, and parentheses stripped, and interword spaces
% replaced by dashes. Furthermore, instead of the rather verbose
% |dark-skin-tone|, |medium-dark-skin-tone|, etc modifiers, emo
% uses the more succinct |darkest|, |darker|, |medium|, |lighter|, and
% |lightest|.
%
% For some names, emo goes further by hard-coding shorter names. Those names are
% listed in Table~\ref{tab:special-names}.
%
% \begin{table}
% \caption{Exceptional emoji names}
% \label{tab:special-names}
% \small\vspace{1em}
% \begin{tabular}{ll}
% \textbf{Transformed Unicode Name} & \textbf{Emo Replacement Name} \\ \hline
% |a-button-blood-type| & |a-button| \\
% |ab-button-blood-type| & |ab-button| \\
% |b-button-blood-type| & |b-button| \\
% |o-button-blood-type| & |o-button| \\
% |bust-in-silhouette| & |bust| \\
% |busts-in-silhouette| & |busts| \\
% |flag-european-union| & |eu| \\
% |globe-showing-americas| & |globe-americas| \\
% |globe-showing-asia-australia| & |globe-asia-australia| \\
% |globe-showing-europe-africa| & |globe-africa-europe| \\
% |hear-no-evil-monkey| & |hear-no-evil| \\
% |index-pointing-at-the-viewer| & |index-pointing-at-viewer| \\
% |index-pointing-at-the-viewer-darkest| & |index-pointing-at-viewer-darkest| \\
% |index-pointing-at-the-viewer-darker| & |index-pointing-at-viewer-darker| \\
% |index-pointing-at-the-viewer-medium| & |index-pointing-at-viewer-medium| \\
% |index-pointing-at-the-viewer-lighter| & |index-pointing-at-viewer-lighter| \\
% |index-pointing-at-the-viewer-lightest| & |index-pointing-at-viewer-lightest| \\
% |keycap-*| & |keycap-star| \\
% |keycap-#| & |keycap-hash| \\
% |keycap-0| & |keycap-zero| \\
% |keycap-1| & |keycap-one| \\
% |keycap-2| & |keycap-two| \\
% |keycap-3| & |keycap-three| \\
% |keycap-4| & |keycap-four| \\
% |keycap-5| & |keycap-five| \\
% |keycap-6| & |keycap-six| \\
% |keycap-7| & |keycap-seven| \\
% |keycap-8| & |keycap-eight| \\
% |keycap-9| & |keycap-nine| \\
% |keycap-10| & |keycap-ten| \\
% |magnifying-glass-tilted-left| & |loupe-left| \\
% |magnifying-glass-tilted-right| & |loupe-right| \\
% |palm-down-hand| & |palm-down| \\
% |palm-down-hand-darkest| & |palm-down-darkest| \\
% |palm-down-hand-darker| & |palm-down-darker| \\
% |palm-down-hand-medium| & |palm-down-medium| \\
% |palm-down-hand-lighter| & |palm-down-lighter| \\
% |palm-down-hand-lightest| & |palm-down-lightest| \\
% |palm-up-hand| & |palm-up| \\
% |palm-up-hand-darkest| & |palm-up-darkest| \\
% |palm-up-hand-darker| & |palm-up-darker| \\
% |palm-up-hand-medium| & |palm-up-medium| \\
% |palm-up-hand-lighter| & |palm-up-lighter| \\
% |palm-up-hand-lightest| & |palm-up-lightest| \\
% |rolling-on-the-floor-laughing| & |rofl| \\
% |see-no-evil-monkey| & |see-no-evil| \\
% |speak-no-evil-monkey| & |speak-no-evil| \\
% \end{tabular}
% \end{table}
%
% Emo's |emo.def| contains the names and codepoints of all currently supported
% emoji in Unicode display order. Emo's distribution also includes the
% |emoji-test.txt| file, which is part of
% \href{https://unicode.org/reports/tr51/}{Unicode TR-51} and contains the names
% and codepoints of all \emph{potentially} supported emoji, i.e., all emoji,
% also in Unicode display order. It further organizes emoji into groups and
% subgroups, with the current (sub)group being the one named on the closest line
% above the emoji that starts with |# |(|sub|)|group:|. As described in the next
% section, the group and subgroup names can be used during configuration for
% concisely naming a large number of emoji.
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsubsection{Inventory of Default Configuration}
%
% Emo's default configuration includes all emoji \emph{but} those in the
% \emph{people-and-body} Unicode group that modify gender, hair, or skin and
% those in the \emph{country-flag} subgroup of the \emph{flags} group other than
% the EU flag (which is included). As of Unicode 15.0, that's 1,415 out of 3,655
% emoji. There are another 257 flags, but the majority of excluded emoji are
% variations on already included emoji depicting people or body parts. As
% described in the next section, enabling additional emoji is as easy as running
% a Python script with the emoji names as arguments.
%
% With their names listed in Unicode display order and organized by Unicode
% group and subgroup, that's the following emoji.
%
% \listinventory
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Two Optional Macros}
%
% \DescribeMacro{\lingchi}
% \DescribeMacro{\YHWH}
% The |\lingchi| and |\YHWH| macros take no arguments and produce \lingchi\ and
% \YHWH. They are only available if emo is used with the |extra| option.
% The former renders the Chinese term for ``death by a thousand cuts.'' While
% originally an execution method, the term applies to surprisingly many software
% systems as well. The latter produces the Tetragrammaton, the Hebrew name for
% God. Observant Jews never utter what's written, not even in their thoughts,
% substituting Adonai (``My Lord''), Elohim (``God''), or HaShem (``The Name'')
% instead. In my mind, that nicely mirrors the very incomprehensibility of
% \YHWH. Both macros preserve a subsequent space as space, no backslash needed.
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Conversion to HTML}
%
% Emo supports conversion to HTML with either
% \href{https://github.com/brucemiller/LaTeXML}{LaTeXML} or
% \href{https://tug.org/tex4ht/}{TeX4ht}. LaTeXML support is implemented by a
% separate ``binding'' against LaTeXML's Perl API. I chronicled my exploration
% of suitable options leading to that less than ideal choice in a
% \href{https://github.com/brucemiller/LaTeXML/issues/2063}{GitHub issue}.
% TeX4ht support is implemented by the emo package itself. It requires
% processing with LuaLaTeX e.g., by passing |-l| or |--lua| to the |make4ht|
% tool.
%
%
% ^^A ==================================================================================
% \section{Configuration}
% \label{sec:config}
%
% Emo's implementation is actually split over two files: |emo.sty| is extracted
% from |emo.dtx| and defines the substance of the package, its options, its
% helper macros, and the user-visible |\emo|, |\lingchi|, and |\YHWH| macros.
% Currently supported emoji are defined by the emoji table in the second file,
% |emo.def|. For every supported emoji, the file contains a command
% |\emo@emoji@|\meta{emoji-name} with the emoji's codepoints as value.
%
% Configuration automates the regeneration of the emoji table for arbitrary
% numbers of emoji. |config/emo.py| is the script and |config/emoji-test.txt| is
% the list of all emoji from the Unicode standard.
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Running the Configuration Script}
%
% To update emo's configuration, invoke the |config/emo.py| script:
% \begin{verbatimish}
%     \$ python3 config/emo.py \meta{selector} \meta{selector} $\ldots$
% \end{verbatimish}
%
% Each selector may be:
% \begin{itemize}
% \item The literal |ALL| (case-sensitive) for \emph{all} emoji.
% \item Name of a group in |emoji-test.txt| lowercased and with spaces replaced
%     by dashes and ampersand |&| replaced by an |and|; e.g.,
%     |travel-and-places|.
% \item Name of a group, a double colon |::|, and name of a subgroup, again
%     lowercased and with spaces replaced by dashes and |&| by an |and|; e.g.,
%     \texttt{travel-and-places::\-place\-geo\-graphic}.
% \item The name of an emoji; e.g., |desert-island|.
% \end{itemize}
% For conjunctive group names, such as ``Smileys \& Emotion'' (|emoji-test.txt|)
% or ``smileys-and-emotion'' (|emo.py|), the configuration script also accepts
% either of the two nouns as a shortcut, e.g., ``smileys'' or ``emotion.''
%
% For data safety, |emo.py| does not overwrite PDF graphics and hence can only
% \emph{add} emoji to the configuration. To remove emoji, simply remove their
% PDF graphics from |emo-graphics| and then run |emo.py| without selector
% arguments, which updates the emoji table accordingly.
%
% |emo.py| effectively treats |emoji-test.txt| as registry of all emoji and the
% filenames of PDF graphics in |emo-graphics| as emo's current inventory. For
% all emoji named by selector arguments but not in the inventory, |emo.py|
% converts the SVG source graphic from the Noto color emoji sources to a PDF
% file and deletes the |/Page| |/Group| object from the the PDF again, since
% that object trips up |pdflatex|. And yeah, |emo.py| automatically downloads
% the Noto color emoji sources if necessary.
%
%
% ^^A ==================================================================================
% \section{Copyright and Licensing}
%
% Since emo's distribution includes not only LaTeX code but also a substantial
% Python script, Unicode data about emoji, as well as graphics and fonts derived
% from Google's Noto project, a number of different licenses apply. All of them
% are \href{https://opensource.org/licenses/}{OSI approved} and non-copyleft:
% \begin{itemize}
% \item This package's LaTeX and also Perl code extracted from |emo.dtx|
%     is © Copyright 2023 by Robert Grimm and has been released
%     under the \href{https://www.latex-project.org/lppl/lppl-1-3c/}{LPPL v1.3c}
%     or later.
% \item The |config/emo.py| script also is © Copyright 2023 by Robert Grimm but
%     has been released under the
%     \href{https://www.apache.org/licenses/LICENSE-2.0}{Apache 2.0 license}.
% \item The [config/emoji-test.txt] configuration file is a data file from
%     \href{https://unicode.org/reports/tr51/}{Unicode TR-51} and hence subject
%     to the \href{https://www.unicode.org/license.txt}{Unicode License}.
% \item The |emo-lingchi.ttf| font is a two-glyph subset of the traditional
%     Chinese version of Google's
%     \href{https://github.com/notofonts/noto-cjk}{Noto serif} and hence subject
%     to the \href{https://scripts.sil.org/ofl}{SIL Open Font License v1.1}.
% \item The PDF graphics in the |emo-graphics| directory are derived from the
%     sources for \href{https://github.com/googlefonts/noto-emoji}{Noto's color
%     emoji} and hence subject to the Apache 2.0 license.
% \end{itemize}
%
%
% \StopEventually{^^A
%     \PrintChanges^^A
%     \setcounter{IndexColumns}{2}^^A
%     \columnsep = 20pt^^A
%     \PrintIndex}
%
%
% ^^A ==================================================================================
% \section{Implementation}
%
% Let's get started on emo's implementation:
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% Except, that implementation started near the top of this |emo.dtx| file, well
% before the documentation's preamble. For completeness, here is the package
% declaration again:
%
% \begin{verbatimish}
% |\NeedsTeXFormat{LaTeX2e}|
% |\ProvidesPackage{emo}|
% |    |[\filedate\space\fileversion\space\fileinfo]
% \end{verbatimish}
%
% Unfortunately, emo's version number appears in triplicate in this file, which
% makes cutting a release a little more tricky than it should be. Alas, the
% above, faux package declaration is not one of those repeat offenders. Really.
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Package Options}
%
% \begin{macro}{\ifEmojiExtra}
% \begin{macro}{\ifemo@index}
% \begin{macro}{\ifemo@debug}
% \changes{0.4}{}{Add {\tt debug} option for drawing boundary boxes}
% Define a conditional flag for each package option.
%    \begin{macrocode}
\newif\ifEmojiExtra
\newif\ifemo@index
\newif\ifemo@debug
%    \end{macrocode}
%
% Wire each conditional to the package option and then process them all.
%    \begin{macrocode}
\DeclareOption{extra}{\EmojiExtratrue}
\DeclareOption{index}{\emo@indextrue}
\DeclareOption{debug}{\emo@debugtrue}
\ProcessOptions\relax
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Package Dependencies and Backend Selection}
%
% Require |inputenc| to declare this file's character encoding as UTF-8. XeTeX
% and LuaTeX already use that encoding by default and hence this line is
% redundant. But pdfTeX originates from darker, pre-Unicode times and thus needs
% to be told. Though thankfully, it does support the encoding by now.
%    \begin{macrocode}
\RequirePackage[utf8]{inputenc}
%    \end{macrocode}
%
% \begin{macro}{\ifemo@use@unicode}
% \begin{macro}{\ifemo@use@font}
% \begin{macro}{\ifemo@use@pdf}
% Define a conditional flag for each major backend feature. They are \emph{not}
% orthogonal: |\ifemo@use@unicode| and |\ifemo@use@pdf| are mutually exclusive
% and determine whether emo generates Unicode text or PDF graphics. For
% |\ifemo@use@font| to be enabled, |\ifemo@use@unicode| must already be enabled
% as well.
%    \begin{macrocode}
\newif\ifemo@use@unicode
\newif\ifemo@use@font
\newif\ifemo@use@pdf
%    \end{macrocode}
%
% Inspect the runtime environment and accordingly set the just defined backend
% flags. |\HCode| is defined by TeX4ht. Since correctly converting to HTML with
% TeX4ht requires LuaTeX, print a helpful error message for other engines.
%    \begin{macrocode}
\RequirePackage{iftex}
\ifdefined\HCode
\ifluatex\else
\PackageError{emo}{%
    LuaTeX required for TeX4ht converting LaTeX to HTML.\MessageBreak
    You may also see ``Missing character'' messages or\MessageBreak
    ``Unicode character ... not set up'' errors.\MessageBreak
    To fix, please pass the -l or --lua option to make4ht tool}{%
    Run TeX4ht with LuaTeX by passing -l or --lua option to make4ht}
\fi
\emo@use@unicodetrue
\else
\ifluatex
\emo@use@unicodetrue
\emo@use@fonttrue
\else
\emo@use@pdftrue
\fi
\fi
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% We need the backend flags to decide whether to load |fontspec| or not. We do
% that before requiring any other packages because that way the packages related
% to encoding and fonts are loaded first (together with |iftex|).
%    \begin{macrocode}
\ifemo@use@font
\RequirePackage{fontspec}
\fi
%    \end{macrocode}
%
% Require |xcolor| for formatting highly visible error messages within the
% generated document. Always including another package that is only used when
% there are errors is not ideal. But I couldn't get on-demand package loading to
% work. So we have to eagerly require the package.
%    \begin{macrocode}
\RequirePackage{xcolor}
%    \end{macrocode}
%
% The two remaining requirements depends on a package option and on the backend,
% respectively.
%    \begin{macrocode}
\ifemo@index
\RequirePackage{index}
\fi
\ifemo@use@pdf
\RequirePackage{graphicx}
\fi
%    \end{macrocode}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{The Emoji Table}
%
% \changes{0.3}{}{Include {\tt\char`\\lingchi} and {\tt\char`\\YHWH} in emoji table}
% \changes{1.0}{}{Drop {\tt\char`\\textdir} from emoji table entry for {\tt YHWH}}
% \changes{1.0}{}{Introduce high-level emoji table format that preserves Unicode
%     grouping and order}
%
% The emoji table contains an entry for every emoji supported in the current
% configuration. Each such entry defines a macro without arguments, which has
% the emoji's name prepended with |emo@emoji@| as its name and expands to the
% emoji's fully qualified Unicode codepoints. The macro for |keycap-hash| is an
% exception: Its first codepoint is the plain hash \# character, which trips up
% TeX's parser. Hence the macro for |keycap-hash| expands to the |\char|'ed
% codepoints. If the extra option is active, the emoji table also contains
% entries for |\lingchi| and |\YHWH|.
%
% Before version 1.0, |emo.def| contained the macro definitions for the emoji
% table, with definitions ordered by emojis' codepoints. The lack of meaningful
% hierarchy and order made |emo.def| unusable for generating documentation,
% notably an inventory of currently supported emoji. To make |emo.def| more
% useful, version 1.0 introduced a higher-level file format based on the five
% macros described next.
%
% \begin{macro}{\EmojiBeginGroup}
% \begin{macro}{\EmojiBeginSubroup}
% \begin{macro}{\DefineEmoji}
% \begin{macro}{\EmojiEndSubgroup}
% \begin{macro}{\EmojiEndGroup}
% The file format for |emo.def| relies on |\DefineEmoji| to associate emoji
% names with their Unicode codepoints, |\EmojiBeginGroup| and |\EmojiEndGroup|
% to organize emoji into groups, and on |\EmojiBeginSubgroup| and
% |\EmojiEndSubgroup| to organize emoji into subgroups. All definitions with
% |\DefineEmoji| are listed in Unicode display order and grouped in their
% Unicode group and subgroup. Subgroups are properly nested inside groups. The
% group and subgroup for |lingchi| and |YHWH| are both called |extra|.
%
% |\DefineEmoji|\marg{name}\marg{codepoints} takes an emoji's name and its
% Unicode codepoints as arguments---except for |keycap-hash|, which uses has the
% |\char|'ed codepoints as value because TeX does not handle hash characters in
% the input.
%
% |\EmojiBeginGroup|\marg{group} and |\EmojiEndGroup|\marg{group} take a group
% name as their only argument. In contrast,
% |\EmojiBeginSubgroup|\marg{group}\marg{subgroup} and
% |\EmojiEndSubgroup|\marg{group}\marg{subgroup} take both the group and
% subgroup names as their two arguments.
%
% If the |extra| option is enabled, |\lingchi| and |\YHWH| are treated just like
% emoji, and their names and Unicode codepoints (sans any group, font selection,
% or text direction) are included with the emoji table.
%
% The conversion from the abstract file format for |emo.def| to the concrete
% emoji table is simple enough, especially since four macros remain no-ops.
% \begin{macrocode}
\def\EmojiBeginGroup#1{}
\def\EmojiBeginSubgroup#1#2{}
\def\DefineEmoji#1#2{%
    \expandafter\def\csname emo@emoji@#1\endcsname{#2}}
\def\EmojiEndSubgroup#1#2{}
\def\EmojiEndGroup#1{}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% With that, we are ready to read |emo.def|:
%    \begin{macrocode}
\input{emo.def}
%    \end{macrocode}
%
% The emoji table is automatically generated with the |config/emo.py| Python
% script. When invoked without arguments, that script simply recreates the emoji
% table based on the emoji present in the |emo-graphics| directory. If invoked
% with arguments naming Unicode emoji groups, groups and subgroups, or
% individual emoji, the script converts SVG graphcis from the Noto emoji font
% sources to PDF graphics compatible with LaTeX and then rebuilds the inventory
% in |emo.def|. If necessary, the Python code downloads the Noto emoji font
% sources.
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Internal Macros}
%
% \begin{macro}{\emo@error@fg}
% \begin{macro}{\emo@error@bg}
% \begin{macro}{\emo@error}
% Define two colors and a macro |\emo@error|\marg{emoji-name} function that uses
% the two colors for formatting an attention-grabbing error message. If you use
% an invalid emoji name and overlook the warning in the console, you \emph{will}
% notice the error messsage in the document thusly formatted.
%    \begin{macrocode}
\definecolor{emo@error@fg}{rgb}{1,1,1}
\definecolor{emo@error@bg}{rgb}{.6824,.0863,.0863}
\def\emo@error#1{%
    \colorbox{emo@error@bg}{%
        \textcolor{emo@error@fg}{%
            \textsf{Bad} \texttt{\char`\\emo\{#1\}}}}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\emo@ifdef}

% The |\emo@ifdef|\marg{name}\marg{code} macro validate the emoji name given as
% first argument. If the name is invalid, it expands to an error message. If the
% name is valid, it executes the code given as second argument. The
% implementation critically relies on the emoji table being accurate.

%    \begin{macrocode}
\def\emo@ifdef#1#2{%
    \ifcsname emo@emoji@#1\endcsname#2\else%
        \PackageWarning{emo}{Unknown emoji name in `\string\emo{#1}'}%
        \emo@error{#1}%
    \fi}
%    \end{macrocode}
% \end{macro}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{User Macros and Hooks}
%
% \subsubsection{Background: Variability vs Code Duplication}
%
% Emo's implementation changed considerably between versions 0.1 and 1.0:
%
% For \textbf{versions 0.1 and 0.2}, I focused on getting emo to work across
% pdfTex, XeTeX, and LuaTeX as well as to adhere to the (naming) conventions of
% the TeX ecosystem. My initial strategy for managing the variability of package
% options and backends was to define the same internal and user macros several
% times each to account for just that variability. Hence, emo included two
% versions for the internal |\emo@index| macro, namely one version to emit an
% index entry and one version to do nothing. It also included two versions each
% for |\emo|, |\lingchi|, and |\YHWH|, namely one version to emit a group with a
% command setting the font (and another command setting the text direction for
% |\YHWH|) followed by some Unicode codepoints and another version to include a
% PDF graphic. It worked. But especially the two definitions for each of the
% three user macros suffered from noticeable code duplication.
%
% Version 0.2 also added support for conversion to HTML with LaTeXML. But it did
% so through a separate binding and hence did not require changes to emo's
% implementation.
%
% In contrast, for \textbf{version 0.3}, I integrated support for TeX4ht into
% the implementation and treated rendering Unicode codepoints \emph{without}
% preceding font selection as a \emph{third} backend. That increased variability
% and also the corresponding complexity of definitions. Notably, the internal
% |\emo@content| macro for rendering either Unicode codepoints, Unicode
% codepoints with font selection, or PDF graphic was defined thrice.
%
% At the same time, the implementation also eliminated some variability by
% including entries for |\lingchi| and |\YHWH| in the emoji table. That made it
% possible for both macros to delegate to |\emo|---except when rendering Unicode
% codepoints \emph{with font selection}. In the latter case, each macro renders
% glyphs in a different ``language'' and possibly writing system and hence also
% needs to select a different font.
%
% For \textbf{version 0.4}, I introduced the |debug| package option, which
% instructs emo to make the bounding boxes for its output visible. To implement
% the option, I added code that wraps the result of a macro in an |fbox| three
% times. Clearly, that's two times too many.
%
% That same version also added unit tests and, as a result of writing and
% debugging the unit tests, my TeX-fu improved considerably. So after releasing
% that version, I started looking for a more ergonomic approach to emo's
% implementation, discovered
% \href{http://tug.ctan.org/macros/latex/base/lthooks-code.pdf}{LaTeX hooks},
% and switched to them for \textbf{version 1.0}.
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsubsection{A Skeleton of Render Hooks}
%
% \begin{macro}{emo/render/before}
% \begin{macro}{emo/render/emoji}
% \begin{macro}{emo/render/chinese}
% \begin{macro}{emo/render/hebrew}
% \begin{macro}{emo/render/content}
% \begin{macro}{emo/render/after}
% To determine emo's hooks, we consider the functional requirements of emo's
% three macros and pay close attention to how those requirements converge and
% diverge:
% \begin{enumerate}
% \item All three macros visually render one or more glyphs. Let's introduce the
% |emo/render/content| hook for that.
% \item Each macro generates glyphs in a different ``language'' and writing
% system and thus may need to set the font, text direction, and so on. Let's
% introduce the |emo/render/emoji|, |emo/render/chinese|, and
% \texttt{emo/\-render/\-hebrew} hooks for that.
% \item Just as in aspect-oriented programming, we sometimes need to track macro
% invocations (e.g., for the |index| package option) or modify macro results
% (e.g., for the |debug| package option). Let's introduce the
% \texttt{emo/\-render/\-before} and \texttt{emo/\-render/\-after} hooks for
% that.
% \end{enumerate}
% Before version 1.0, |\lingchi| and |\YHWH| relied on a trailing |\xspace| to
% obviate the need for trailing backslashes before spaces. Continued support
% would require introducing another hook. If that hook is hardcoded into the
% user macro template, it adds unnecessary overhead for every invocation of
% |\emo|. If it is optional, then macro template instantiation becomes more
% complicated. Since both options increase complexity with little benefit, I
% dropped that feature with version 1.0.
%
% Here are the emo's render hooks:
%    \begin{macrocode}
\NewHook{emo/render/before}
\NewHook{emo/render/emoji}
\ifEmojiExtra
\NewHook{emo/render/chinese}
\NewHook{emo/render/hebrew}
\fi
\NewHook{emo/render/content}
\NewReversedHook{emo/render/after}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\emo@makecommand}
% \begin{macro}{\emo@command}
% \begin{macro}{\emo@key}
% \begin{macro}{\emo@value}
% With the hooks declared, we are ready to define the internal
% |\emo@makecommand| macro, which in turn defines each of the three user macros.
% Since those three macros differ in control sequence and font selection hook,
% |\emo@makecommand| takes two arguments. The user macro, in turn, takes one
% argument, the name of the entity to render. Since hooks have no arguments, we
% need a way for determining the current command, the key argument, and the
% resulting, rendered value. The implementation uses |\emo@command|, |\emo@key|,
% and |\emo@value| for just that purpose.
%
% The rest is straight-forward: After defining |\emo@command| and |\emo@key|,
% the implementation tests whether that key is valid. If so, it invokes the
% \texttt{emo/\-render/\-before} hook, renders the content by invoking the font
% selection and content hooks inside a group, binds the result to |\emo@value|,
% invokes the \texttt{emo/\-render/\-after} hook, and yields the value. The
% group ensures that any sticky changes to font etc are contained within the
% macro invocation.
%
% Admittedly, it took some trial and error to arrive at this version of
% \texttt{\char`\\emo@\-make\-command}. I started out with |\emo@makecommand|
% only assembling the body of each user macro. That required using |\edef| for
% the user macro and prefixing almost every token in |\emo@makecommand| with
% |\noexpand|. I converged on the current, simpler implementation once I
% realized that I could pass the control sequence to be defined as an argument.
%    \begin{macrocode}
\def\emo@makecommand#1#2{
    \newcommand*{#1}[1]{%
        \def\emo@command{#1}%
        \def\emo@key{##1}%
        \emo@ifdef{##1}{%
            \UseHook{emo/render/before}%
            \def\emo@value{%
                \begingroup%
                #2%
                \UseHook{emo/render/content}%
                \endgroup}%
            \UseHook{emo/render/after}%
            \emo@value}}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsubsection{The User Macros}
%
% \begin{macro}{\emo}
% Render the named emoji either as Unicode or as a PDF graphic. To do so,
% instantiate the skeleton with the font selection hook for emoji.
%    \begin{macrocode}
\emo@makecommand\emo{\UseHook{emo/render/emoji}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lingchi}
% \changes{0.3}{}{Build on {\tt\char`\\emo} by default}
% \changes{1.0}{}{Drop use of trailing {\tt xspace}}
% \begin{macro}{\YHWH}
% \changes{0.3}{}{Build on {\tt\char`\\emo} by default}
% \changes{1.0}{}{Drop use of trailing {\tt xspace}}
% Since |\lingchi| and |\YHWH| do not take arguments, they require a helper
% macro that provides the necessary argument to the macro generated by
% |\emo@makecommand|. Originally, both macros included a trailing |\xspace| in
% their expansion. While it would be possible to implement that with hooks based
% on |\emo@command|, it seems like an unnecessary complication, so I dropped
% that feature in version 1.0.
%    \begin{macrocode}
\ifEmojiExtra
\emo@makecommand\emo@lingchi{\UseHook{emo/render/chinese}}
\emo@makecommand\emo@YHWH{\UseHook{emo/render/hebrew}}
\newcommand*{\lingchi}{\emo@lingchi{lingchi}}
\newcommand*{\YHWH}{\emo@YHWH{YHWH}}
\fi
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsubsection{Activating the Hooks}
%
% So far, the three user-facing macros do nothing besides creating empty groups.
% We change that by activating the hooks as required by emo's package options
% and the current engine. Conveniently, we only need to add to a hook if we need
% it to do something. In the following, we activate hooks in invocation order,
% from |emo/render/before| to font selection hooks to |emo/render/content| to
% |emo/render/after|.
%
% If the |index| option is enabled, create the necessary index and emit entries
% through the |emo/render/before| hook. The hook uses the |\emo@emit@index|
% helper macro because stepping through |[emo]| requires three more
% |\expandafter| invocations.
%    \begin{macrocode}
\ifemo@index
\newindex{emo}{edx}{end}{Emoji Index}
\def\emo@emit@index#1{\index[emo]{#1}}
\AddToHook{emo/render/before}{%
    \expandafter\emo@emit@index\expandafter{\emo@key}}
\fi
%    \end{macrocode}
%
% Next, if the backend uses fonts, set up font selection in the corresponding
% hooks. We only activate the |emo/render/chinese| and |emo/render/hebrew| hooks
% if the |extra| package option is enabled. Note that since Hebrew is written
% right-to-left, the font selection hook also set the text direction. This is
% safe to do because font selection and content are always enclosed in a group.
%    \begin{macrocode}
\ifemo@use@font
\newfontface\emo@font@emoji[Renderer=Harfbuzz]{NotoColorEmoji.ttf}
\AddToHook{emo/render/emoji}{\emo@font@emoji}
\ifEmojiExtra
\newfontface\emo@font@chinese{emo-lingchi.ttf}
\newfontface\emo@font@hebrew{LinLibertine_R.otf}
\AddToHook{emo/render/chinese}{\emo@font@chinese}
\AddToHook{emo/render/hebrew}{\emo@font@hebrew\textdir TRT}
\fi
\fi
%    \end{macrocode}
%
% Next, we activate the |emo/render/content| hook to either emit Unicode
% codepoints or PDF graphics.
%    \begin{macrocode}
\ifemo@use@unicode
\AddToHook{emo/render/content}{\csname emo@emoji@\emo@key\endcsname}
\fi
\ifemo@use@pdf
\AddToHook{emo/render/content}{%
    \raisebox{-0.2ex}{%
        \includegraphics[height=1em]{emo-graphics/emo-\emo@key}}}
\fi
%    \end{macrocode}
%
% Finally, if the |debug| package option is enabled, we wrap the rendered
% content in a frame box.
%    \begin{macrocode}
\ifemo@debug
\AddToHook{emo/render/after}{%
    \let\emo@realvalue\emo@value%
    \def\emo@value{\fbox{\emo@realvalue}}}
\fi
%    \end{macrocode}
%
% Et voil\`a. That's it!
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
%
% ^^A ==================================================================================
% \section{LaTeXML Binding}
% \changes{0.2}{}{Add LaTeXML binding for conversion to HTML}
%
% ^^A Reset line number counter
% \makeatletter
% \c@CodelineNo 0
% \makeatother
%
% To support conversion from LaTeX to HTML, emo includes a so-called binding for
% \href{https://github.com/brucemiller/LaTeXML}{LaTeXML}. It effectively is a
% (much simplified) re-implementation of emo's core functionality, only written
% in Perl against LaTeXML's API. The binding ignores the |index| option
% and does not perform error checking on emoji names. If either is important to
% you, please compile the document with LaTeX first. Furthermore, the binding
% emits necessary Unicode codepoints only, without font annotations. If you want
% to specify fonts, please use a CSS fontstack.
%
% Asking package authors to reimplement their packages for LaTeXML seems
% unreasonable to me. It leads to code duplication and places the maintenance
% burden on package authors. Yet, right after announcing emo, the question of
% LaTeXML support came up. LaTeXML includes the |latexml.sty| package, which
% defines |\iflatexml|. I would have used that command to make the three-line
% change to |emo.sty| necessary to support LaTeXML, except |latexml.sty|
% contains lots of other stuff that isn't needed. Always loading lots of macros
% only to detect LaTeXML slows down compilation and wastes memory. Since
% reimplementing |\iflatexml| would require a binding anyways, I just wrote a
% minimal binding. As I said, LaTeXML's approach is broken.
%
% With that out of the way, let's get started:
%    \begin{macrocode}
%<*latexml-binding>
%    \end{macrocode}
%
% The binding starts with an explicit preamble because |docstrip| does not
% alllow for a redefinition of the starting characters of a line comment. It is
% followed by the Perl dependencies.
%    \begin{macrocode}
## emo's LaTeXML binding.
## (C) 2023 by Robert Grimm.
## Released under LPPL v1.3c or later.
use strict;
use warnings;
use LaTeXML::Package;
%    \end{macrocode}
%
% \begin{macro}{\ifEmojiExtra}
% Next, we use raw TeX to declare the LaTeX package and the |\ifEmojiExtra|
% conditional. The binding does not require any other conditionals since it only
% runs under LaTeXML and does not support options other than |extra|.
%    \begin{macrocode}
RawTeX(<<'EOTeX');
\ProvidesPackage{emo}
    [2023/99/99 v1.0 emo•ji for all (LaTeX engines)]
\newif\ifEmojiExtra
EOTeX
%    \end{macrocode}
% \end{macro}
%
% Option prcessing is almost trivial:
%    \begin{macrocode}
DeclareOption('extra', '\EmojiExtratrue');
DeclareOption('index', '');
DeclareOption('debug', '');
ProcessOptions();
%    \end{macrocode}
%
% \begin{macro}{\EmojiBeginGroup}
% \begin{macro}{\EmojiBeginSubgroup}
% \begin{macro}{\DefineEmoji}
% \begin{macro}{\EmojiEndSubgroup}
% \begin{macro}{\EmojiEndGroup}
% Define the five macros for parsing the emoji table. They are the same as those
% defined by the package itself.
%    \begin{macrocode}
DefMacro('\EmojiBeginGroup{}', '');
DefMacro('\EmojiBeginSubgroup{}{}', '');
DefMacro('\DefineEmoji{}{}',
    '\expandafter\def\csname emo@emoji@#1\endcsname{#2}');
DefMacro('\EmojiEndSubgroup{}{}', '');
DefMacro('\EmojiEndGroup{}', '');
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% Thusly prepared, read in the emoji table.
%    \begin{macrocode}
InputDefinitions('emo', type => 'def', noltxml => 1);
%    \end{macrocode}
%
% \begin{macro}{\emo}
% Define the simplest possible version of |\emo|. It has no hooks, no error
% checking, no font selection, and no support for |index| or |debug|. It does,
% however, expand the emoji table entry.
%    \begin{macrocode}
DefMacro('\emo{}', '\csname emo@emoji@#1\endcsname');
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lingchi}
% \begin{macro}{\YHWH}
% If the |EmojiExtra| conditional is enabled, provide similarly minimal
% re-definitions of the |\lingchi| and |\YHWH| macros.
%    \begin{macrocode}
if (IfCondition(T_CS('\ifEmojiExtra'))) {
    DefMacro('\lingchi', "\x{51cc}\x{9072}");
    DefMacro('\YHWH', "\x{05D9}\x{05D4}\x{05D5}\x{05D4}");
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% That's it for the binding, too.
%    \begin{macrocode}
%</latexml-binding>
%    \end{macrocode}
%
%
% ^^A ==================================================================================
% \section{Testing and Documenting Emo}
% \changes{0.4}{}{Introduce a simple unit testing framework}
%
% The following package and documents help test emo across all major LaTeX
% engines and generate informative reports.
%
% Alas, we first start an always false conditional to prevent execution of this
% code while generating the documentation.
%    \begin{macrocode}
%<*scaffold>
\iffalse
%</scaffold>
%    \end{macrocode}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Emo's Support Package}
%
% ^^A Reset line number counter
% \makeatletter
% \c@CodelineNo 0
% \makeatother
%
%    \begin{macrocode}
%<*support>
%    \end{macrocode}
%
% The |emo-support| package defines high-level macros that make testing and
% documenting the emo package easier. At the same time, no attempt has been made
% to make |emo-support| reusable. The package exists only to support emo.
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{emo-support}[2023/99/99 v1.0 Test & document emo]
%    \end{macrocode}
%
% There are no options to process.
%    \begin{macrocode}
\ProcessOptions\relax
%    \end{macrocode}
%
% We require |iftex| for determining the LaTeX engine, |multicol| for compact
% inventory listings, |xcolor| for appearances, and |emo| itself for its
% |\ifemo@use@unicode|, |\ifemo@use@font|, and |\ifemo@use@pdf| conditionals.
% This package also reuses |emo|'s font variables during test execution.
%    \begin{macrocode}
\RequirePackage{iftex}
\RequirePackage{multicol}
\RequirePackage{xcolor}
\RequirePackage[extra]{emo}
%    \end{macrocode}
%
% Since font selection across engines is a mouthful, we select the document
% fonts here inside the support package. That may include requiring |fontspec|,
% too.
%    \begin{macrocode}
\iftutex
\RequirePackage{fontspec}
\RequirePackage{libertinus}
\setmonofont{inconsolata}
\else
\RequirePackage{libertinus}
\RequirePackage{inconsolata}
\fi
%    \end{macrocode}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsubsection{Report Generation}
%
% \begin{macro}{\enginename}
% I couldn't find an existing macro that provides the desired functionality, so
% we gotta round up the usual suspects to define the engine name.
%    \begin{macrocode}
\ifxetex
\def\enginename{XeTeX}
\else
\ifluatex
\def\enginename{LuaTeX}
\else
\ifpdftex
\def\enginename{pdfTeX}
\else
\def\enginename{\emph{unknown engine}}
\fi
\fi
\fi
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{emo@canary@frameinner}
% \begin{macro}{emo@canary@frameouter}
% \begin{macro}{emo@canary@background}
% Define frame and background colors for boundary boxes of sample text.
%    \begin{macrocode}
\definecolor{emo@canary@frameinner}{HTML}{636366}
\definecolor{emo@canary@frameouter}{HTML}{48484A}
\definecolor{emo@canary@background}{HTML}{E5E5EA}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% Adjust settings for |\fcolorbox| so that it serves as bounding box.
%    \begin{macrocode}
\setlength{\fboxrule}{0.5pt}
\setlength{\fboxsep}{0pt}
%    \end{macrocode}
%
% \begin{macro}{\emo@nobox}
% \begin{macro}{\emo@wordbox}
% \begin{macro}{\emo@linebox}
% The sample text may or may not show bounding boxens for words and emoji. It
% always shows the bounding box for the entire line.
%    \begin{macrocode}
\newcommand\emo@nobox[1]{#1}
\newcommand\emo@wordbox[1]{%
    \fcolorbox{emo@canary@frameinner}{white}{#1}}
\newcommand\emo@linebox[1]{%
    \fcolorbox{emo@canary@frameouter}{emo@canary@background}{#1}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@sampletext}
% \begin{macro}{\sampletext}
% Show a single line of text that makes use of emo's three macros. To help
% identify incorrect font metrics, spurious whitespace, and other issues, show
% the line's bounding box and, for the starred version, the bounding boxes for
% words and emoji, too.
%    \begin{macrocode}
\def\@sampletext#1{%
    \emo@linebox{%
        #1{It's} #1{\lingchi}:
        #1{Please}, #1{\YHWH}, #1{have} #1{mercy}
        #1{\emo{pleading-face}}!}%
    \vspace{1ex}}
\newcommand*\sampletext{%
    \@ifstar{\@sampletext{\emo@wordbox}}{\@sampletext{\emo@nobox}}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsubsection{Emoji Inventory}
%
% The inventory makes use of custom section headings |\group| and |\subgroup|.
% Let's define their counters.
%    \begin{macrocode}
\newcounter{group}
\newcounter{subgroup}[group]
%    \end{macrocode}
%
% \begin{macro}{\emo@subgrouprule}
% \begin{macro}{\emo@subgroupstyle}
% Subgroup headings are particularly fancy. They show the subgroup name in
% small-caps between horizontal rules. It's easiest to use separate paragraphs
% for each rule as well as the subgroup name. To prevent very ugly column breaks
% between them, we wrap everything in a |minipage| environment.
%    \begin{macrocode}
\def\emo@subgrouprule{\rule{\linewidth}{1pt}\par}
\def\emo@subgroupstyle#1{%
    \begin{minipage}{\linewidth}
        \emo@subgrouprule\par
        \rmfamily\textsc{#1}\vspace{-1.0ex}\par
        \emo@subgrouprule
    \end{minipage}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\group}
% \begin{macro}{\subgroup}
% We are ready to define the new sectioning commands. By using |\@startsection|,
% we LaTeX's support for managing the space above and below the heading for
% free. That makes a huge difference, if the heading appears at the top of a
% page or columns.
%    \begin{macrocode}
\newcommand{\group}{%
    \@startsection{group}{1}{0pt}%
        {-3ex plus -1ex minus -0.2ex}%
        {3ex plus 1ex minus 0.2ex}%
        {\centering\rmfamily\Large\bfseries\itshape}}
\newcommand{\subgroup}{%
    \@startsection{subgroup}{2}{0pt}%
        {-3.5ex plus -1.0ex minus -0.2ex}%
        {2ex plus 0.5ex minus 0.2ex}%
        {\emo@subgroupstyle}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\emo@dotfilla}
% \begin{macro}{\emo@lineup}
% \begin{macro}{\emo@lineup@emoji}
% \begin{macro}{\emo@lineup@extra}
% \begin{macro}{\emo@group@extra}
% The inventory formats emoji names flush left and the corresponding emoji flush
% right with dots in between. Whereas |\emo@dotfilla| formats the dots in the
% middle, |\emo@lineup| takes care of putting it all together into one
% paragraph. It also is careful to enable hyphenation for typewriter text.
% |\emo@lineup@emoji| and |\emo@lineup@extra| account for the differences
% between actual emoji and the two extra macros. Finally, |\emo@group@extra|
% names the extra group.
%    \begin{macrocode}
\def\emo@dotfilla{%
    \unskip\nobreak%
    \leaders\hbox{\hskip 0.1ex.\hskip 0.1ex}%
    \hskip 1em plus 1fill\relax}
\def\emo@lineup#1#2{%
    \noindent\raggedright%
    \texttt{\hyphenchar\font=`\-#1}%
    \emo@dotfilla#2\par}
\def\emo@lineup@emoji#1#2{\emo@lineup{#1}{\emo{#1}}}
\def\emo@lineup@extra#1#2{\emo@lineup{#1}{\csname#1\endcsname}}
\def\emo@group@extra{extra}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\listinventory}
% With that, we are well-prepared for defining the |\listinventory| macro. It
% does all formatting by reading the emoji table from |emo.def| with its own
% version of the file format macros. It even changes |\DefineEmoji| while
% reading |emo.def| to account for the final \emph{extra} group. The resulting
% format lists emojis with their names under |\group| and |\subgroup| headings
% in three columns per page, all contained within a group.
%    \begin{macrocode}
\newcommand{\listinventory}{
    \begingroup
    \setlength{\parskip}{0.3ex plus 0.2ex minus 0.1ex}
    \let\DefineEmoji=\emo@lineup@emoji
    \def\EmojiBeginGroup##1{%
        \def\emo@group{##1}%
        \ifx\emo@group\emo@group@extra%
        \let\DefineEmoji=\emo@lineup@extra%
        \fi%
        \group*{##1}}
    \def\EmojiBeginSubgroup##1##2{\subgroup*{##2}}
    \begin{multicols}{3}
    \input{emo.def}
    \end{multicols}
    \endgroup}
%    \end{macrocode}
% \end{macro}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsubsection{Testing}
%
% \begin{macro}{\emo@canary@actual}
% \begin{macro}{\emo@canary@expected}
% Validating emo's macros turned out to be a bit trickier than I had expected.
% The obvious approach, fully expanding the macros and then comparing the
% results, doesn't work. While TeX does support eager expansion via, for
% example, |\expandafter| and |\edef|, it does so only for some macros.
% ^^A https://tex.stackexchange.com/questions/67192/using-qstest-to-implement-unit-tests
%
% Instead, we need to take a sneakier approach: Generate a box with the macro
% invocation and another box with the expected result and then compare the
% widths of the two boxes. While that is an incomplete comparison and hence
% cannot detect all bugs, it \emph{can} detect any bug where the macro's output
% is shorter or longer than expected. That conveniently includes whitespace,
% which is one of the likeliest regressions.
%
% We get started on that testing strategy by defining two box registers.
%    \begin{macrocode}
\newsavebox{\emo@canary@actual}
\newsavebox{\emo@canary@expected}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\checkwidth}
% \changes{1.0}{}{Since \texttt{xspace} is not used anymore, drop period from
%     measured content}
% The |\checkwidth|\marg{name}\marg{code}\marg{font}\marg{codepoints}\marg{file}
% macro can test emo's three user-facing macros across all engines. It captures
% the variability for doing so across all supported engines with its five
% arguments.
% \begin{enumerate}
% \item \marg{name} of the user macro being tested---e.g., |emo|;
% \item \marg{code} to invoke the macro---e.g., |\emo{robot}|;
% \item name of the command selecting \marg{font}---e.g., |emoji|;
% \item expected Unicode \marg{codepoints}---e.g., |\char"1F916|;
% \item \marg{file} name of the PDF graphic---e.g., |robot|.
% \end{enumerate}
%
% |\checkwidth|'s implementation starts by filling a box each with the actual
% macro content and the expected macro content. Since the actual content
% implicitly differs depending on backend, the latter must explicitly vary the
% expected content depending on backend.
%    \begin{macrocode}
\newcommand\checkwidth[5]{%
    \sbox\emo@canary@actual{#2}%
    \ifemo@use@font%
        \sbox\emo@canary@expected{%
            \begingroup\csname emo@font@#3\endcsname #4\endgroup}%
    \else%
    \ifemo@use@unicode%
        \sbox\emo@canary@expected{\begingroup #4\endgroup}%
    \else%
        \sbox\emo@canary@expected{%
            \raisebox{-0.2ex}{%
                \includegraphics[height=1em]{emo-graphics/emo-#5}}}%
    \fi%
    \fi%
%    \end{macrocode}
% It then generates the test report inside a box. The report states the macro
% name followed by a green check mark or red cross mark, depending on whether
% the two boxes have the same width. If they do not, the red cross mark is
% followed by each box's content and width.
%    \begin{macrocode}
    \mbox{%
    \texttt{\char`\\#1}\space%
    \ifdim\wd\emo@canary@actual=\wd\emo@canary@expected%
        \emo{check-mark-button}%
    \else%
        \emo{cross-mark}%
        \fbox{\usebox{\emo@canary@actual}}\space%
        \the\wd\emo@canary@actual\space%
        \fbox{\usebox{\emo@canary@expected}}\space%
        \the\wd\emo@canary@expected%
    \fi}}
%    \end{macrocode}
% \end{macro}
%
% That's it for emo's support package.
%    \begin{macrocode}
%</support>
%    \end{macrocode}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Engine Test and Report}
%
% ^^A Reset line number counter
% \makeatletter
% \c@CodelineNo 0
% \makeatother
%
%    \begin{macrocode}
%<*canary>
%    \end{macrocode}
%
% Each test report identifies the LaTeX engine and then shows the results of the
% width tests for emo's three user-visible macros. If a test passes, the output
% only contains the macro name and a \emo{check-mark-button} check mark. If a
% test fails, the output contains the macro name, the divergent box widths, and
% a \emo{cross-mark} cross mark. In the latter case, the width test results
% spill into the next line (at the least).
%    \begin{macrocode}
\documentclass[border=10pt, varwidth=6in]{standalone}
\usepackage{emo-support}
\setlength\parindent{0pt}
\setlength{\parskip}{1ex}
\begin{document}
\Huge
\emo{keycap-hash} \enginename: {\Large
\checkwidth{emo}{\emo{robot}}{emoji}{\char"1F916}{robot},
\checkwidth{lingchi}{\lingchi}{chinese}{\char"51CC\char"9072}{lingchi},
\checkwidth{YHWH}{\YHWH}{hebrew}{%
    \csname textdir\endcsname TRT\char"5D9\char"5D4\char"5D5\char"5D4%
}{YHWH}}
\vspace{1ex}\par
%    \end{macrocode}
%
% Next is the sample text, first with and then without boundary boxes for words
% and emoji.
%    \begin{macrocode}
\sampletext*\par\sampletext
\end{document}
%    \end{macrocode}
%
% That's it for the tests and report.
%    \begin{macrocode}
%</canary>
%    \end{macrocode}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Simple Test Document}
%
% ^^A Reset line number counter
% \makeatletter
% \c@CodelineNo 0
% \makeatother
%
%    \begin{macrocode}
%<*oneliner>
%    \end{macrocode}
%
% Not much to see here besides one line of content.s
%    \begin{macrocode}
\documentclass[border=10pt, varwidth=6in]{standalone}
\usepackage{emo-support}
\begin{document}
\Huge\sampletext
\end{document}
%    \end{macrocode}
%
% It's a wrap \emo{zany-face}
%    \begin{macrocode}
%</oneliner>
%    \end{macrocode}
%
% \clearpage
% \Finale
