% \iffalse meta-comment
%
% emo: emoji for all (LaTeX engines)
% (C) Copyright 2023 by Robert Grimm
% Released under LPPL v1.3c or later
% <https://github.com/apparebit/emo>
%
% \fi
% \iffalse
%<prelude>\NeedsTeXFormat{LaTeX2e}
%<prelude>\ProvidesPackage{emo}[2023/03/07 v0.1 emoji for all]
%<*internal>
\iffalse
%</internal>
%<*buildsh>
pdflatex emo.dtx
makeindex -s gind.ist -o emo.ind emo.idx
pdflatex emo.dtx
%</buildsh>
%<*readme>
# Emo: emoji for all (LaTeX engines)

This package defines the `\emo{<emoji-name>}` macro for including color emoji üéâ
in a document no matter the input encoding or LaTeX engine. It uses the Noto
color emoji font if the engine supports doing so and falls back onto PDF
graphics otherwise. When used with the `extra` option, this package also defines
the `\lingchi` and `\YHWH` macros for ÂáåÈÅ≤ and ◊ô◊î◊ï◊î, respectively. Both macros
preserve a subsequent space as space, no backslash needed. When used with the
`index` option, this package also emits raw index entries in an `.edx` file.

To extract the files embedded in [emo.dtx](emo.dtx) and build the
[documentation](emo.pdf), run `pdflatex emo.dtx`. To install this package, place
the resulting `emo.sty`, the Noto font files, and the `emo-graphics` directory
somewhere where LaTeX can find them. In a pinch, your project directory with all
the other source files is just fine.


## Supported Emoji

‚öñÔ∏è ‚ò£Ô∏è ‚úîÔ∏è üèõ üèù üò° üá™üá∫ üëÅ üíæ üåÅ üåç ü§ù üßë‚Äç‚öñÔ∏è 1Ô∏è‚É£ üè∑ üîç üìü ü¶ú üßæ ü§ñ üèü üõë üìê üóë

Apparently, these are the most critical emoji to my writing. I'm automating the
file conversion and record keeping for this package, so coverage will increase
soon enough.

## Implementation

The implementation depends on a PDF file for each distinct emoji and LaTeX
commands defining valid emoji names. I manually assembled currently supported
emoji based on the [SVG sources](https://github.com/googlefonts/noto-emoji) for
the Noto color emoji font, hence only less than 0.1% of all defined emoji are
included. But I learned more than I wanted to about PDF files and `/Page`
`/Group` objects that trip up `pdflatex` and [am automating](scripts/emo.py) PDF
file generation and LaTeX command creation.

While the package ships with Noto fonts for Simplified Chinese and Hebrew to
enable the extra macros, it does not include the all critical Noto color emoji
font. The latter is already included with major TeX distributions.


## Licensing

This package's LaTeX code is ¬© Copyright 2023 by Robert Grimm and has been
released under the [LPPL v1.3c](https://www.latex-project.org/lppl/lppl-1-3c/)
or later. The Noto fonts distributed with the package are subject to the [SIL
Open Font License v1.1](https://scripts.sil.org/ofl), while the PDF files in the
`emo-graphics` directory are distributed under the [Apache 2.0
license](https://www.apache.org/licenses/LICENSE-2.0), just like the [original
SVG files](https://github.com/googlefonts/noto-emoji).

%</readme>
%<*internal>
\fi
\begingroup
%</internal>
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble

emo: emoji for all (LaTeX engines)
(C) Copyright 2023 by Robert Grimm
Released under LPPL v1.3c or later
<https://github.com/apparebit/emo>

\endpreamble
\usedir{tex/latex/emo}
\generate{
    \file{\jobname.sty}{
        \from{\jobname.dtx}{prelude}
        \from{\jobname.table.dtx}{table}
        \from{\jobname.dtx}{package}
    }
}
%</install>
%<install>\endbatchfile
%<*internal>
\usedir{source/latex/emo}
\generate{\file{\jobname.ins}{\from{\jobname.dtx}{install}}}
\nopreamble\nopostamble
\usedir{source/latex/emo}
\generate{\file{build.sh}{\from{\jobname.dtx}{buildsh}}}
\usedir{doc/latex/emo}
\generate{\file{README.md}{\from{\jobname.dtx}{readme}}}
\endgroup
%</internal>
%<*driver>
\PassOptionsToPackage{utf8}{inputenc}
\documentclass{ltxdoc}
\usepackage[extra]{\jobname}
\usepackage{enumitem}
\usepackage{parskip}
\usepackage{inconsolata}
%
% Use BlackFoundry's Inria fonts <https://tug.org/FontCatalogue/inriaserifregular/>
\usepackage[T1]{fontenc}
\usepackage[lining]{InriaSerif}
\renewcommand*\oldstylenums[1]{{\fontfamily{InriaSerif-OsF}\selectfont #1}}
\let\oldnormalfont\normalfont
\def\normalfont{\oldnormalfont\mdseries}
%
\usepackage{hyperref}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
    \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \newcommand\Emo{\textsf{Emo}}
% \newlist{inlinenum}{enumerate*}{1}
% \setlist[inlinenum]{label=(\alph{inlinenumi})}
%
% \GetFileInfo{\jobname.sty}
%
% \DoNotIndex{\csname,\def,\else,\endcsname,\expandafter,\fi,\ifcsname,\relax}
% \DoNotIndex{\char,\string,\textdir,\{,\}}
% \DoNotIndex{\begingroup,\endgroup,\ifluatex}
% \DoNotIndex{\newcommand,\newfontface,\newif,\newindex,\index}
% \DoNotIndex{\colorbox,\definecolor,\includegraphics,\raisebox,\textcolor}
% \DoNotIndex{\textbackslash,\textsf,\texttt}
%
% \title{\Emo: emoji for all\\(\LaTeX\ engines)}
% \author{\href{https://apparebit.com}{Robert Grimm}}
% \date{Version \fileversion\ (\filedate)}
%
% \maketitle
%
% \begin{abstract}
% \noindent\Emo\ implements the |\emo|\marg{emoji-name} command for including
% color emoji such as \emo{desert-island} or \emo{parrot} in your documents
% independent of input encoding or \LaTeX\ engine. The implementation uses the
% Noto color emoji font if the engine supports it and includes PDF graphics
% otherwise. The latter are derived from Noto's SVG sources, so the visual
% appearance is very similar. The source repository is at
% \url{https://github.com/apparebit/emo}.
% \end{abstract}
%
% \tableofcontents
%
% \section{Installation}
%
% The \Emo\ package comprises the |emo.dtx| file with all things \LaTeX, Noto
% font files for Hebrew and Simplified Chinese, and the |emo-graphics| directory
% with PDF graphics. To manually install this package, first extract all
% embedded files by running |pdflatex emo.dtx| and then follow the generic
% \href{https://en.wikibooks.org/wiki/LaTeX/Installing_Extra_Packages}{install
% instructions for \LaTeX} to put the files into their places. In a pinch, your
% project directory will do just fine.
%
%
% \section{Usage}
%
% As usual, you declare your document's dependency on \Emo\ with
% |\usepackage{emo}|. In addition to the unadorned form, \Emo\ takes up to
% two options:
%
% \begin{description}
% \item[extra] Also define the |\lingchi| and |\YHWH| macros, which produce
%     \lingchi and \YHWH, respectively, and are documented below.
% \item[index] Create an emoji index tagged |emo| with the |.edx| extension for
%     the raw index and the |.end| extension for the processed index. This
%     option relies on the |index| package, generates the raw |.edx| file,
%     but does not build or use the processed index.
% \end{description}
%
% \DescribeMacro{\emo}|\emo|\marg{emoji-name} expands to the named emoji. For
% Lua\LaTeX, it uses the Noto color emoji font. For all other engines, it uses
% PDF graphics. That way, |\emo{desert-island}| results in~\emo{desert-island}
% and |\emo{parrot}| results in~\emo{parrot}.
%
% Since LaTeX tends to produce a lot of command line noise about underfull boxes
% and loaded fonts, it's a bit too easy to miss meaningful warnings. For that
% reason, |\emo| expands to an attention-seeking error message upon undefined
% emoji names. For example, |\emo{boo}| produces \emo{boo}.
%
% \DescribeMacro{\lingchi}\DescribeMacro{\YHWH}The |\lingchi| and |\YHWH| macros
% take no arguments and produce \lingchi and \YHWH, respectively. They are only
% available if \Emo\ is used with the \textsf{extra} option. The first command
% is the Chinese term for ``death by a thousand cuts.'' While originally a
% Chinese execution method, the term applies to surprisingly many software
% systems as well. The second command is the Tetragrammaton, the Hebrew name for
% God. Observant Jews do not speak the name, not even in thoughts. In my mind,
% that nicely mirrors the very incomprehensibility of \YHWH and so I started
% using the Tetragrammaton myself. Both macros preserve a subsequent space as
% space, no backslash needed.
%
% \StopEventually{\PrintIndex}
%
% \section{Implementation}
%
% \subsection{The Prelude}
%
% Two following two lines come early on in the |.dtx| file containing all
% sources for this package. After all, the version number should be visible at
% the head of the file. The package documentation starts quite a bit later, but
% has access to the version, \textbf{\fileversion}, and date,
% \textbf{\filedate}.
%
% \begin{verbatim}
% \NeedsTeXFormat{LaTeX2e}
% \ProvidesPackage{emo}[...]
% \end{verbatim}
%
% The rest of the prelude comes next, declaring \Emo's options and requiring its
% dependencies.
%    \begin{macrocode}
%<*prelude>
%    \end{macrocode}
%
% \iffalse

%% ====================================
%%  (1) Package Options & Dependencies
%% ====================================
% \fi
%
% \subsubsection{Package Options}
%
% Declare \Emo's \textsf{extra} and \textsf{index} options.
%    \begin{macrocode}
\newif\ifemo@extra\emo@extrafalse
\DeclareOption{extra}{\emo@extratrue}
\newif\ifemo@indexing\emo@indexingfalse
\DeclareOption{index}{\emo@indexingtrue}
\ProcessOptions\relax
%    \end{macrocode}
%
% \subsubsection{Dependencies}
%
% The first dependency effectively declares this file's encoding to be UTF-8.
% |xelatex| and |lualatex| already expect files to be encoded that way and hence
% ignore the declaration. |pdflatex| supports other (legacy) encodings and hence
% needs to be told.
%    \begin{macrocode}
\RequirePackage[utf8]{inputenc}
%    \end{macrocode}
%
% This package also requires |xcolor| for formatting error messages and,
% depending on the engine, either |fontspec| or |graphicx| as the emoji-emitting
% backend. |iftex| helps keep those engines apart. Always including a package
% that is only used when there are errors is not ideal. I'd prefer to only load
% |xcolor| if needed. But that doesn't seem possible in \LaTeX, at least not
% with |\RequirePackage|. It might be polite to add an option for disabling this
% feature.
%    \begin{macrocode}
\RequirePackage{xcolor}
\RequirePackage{iftex}
\ifluatex
\RequirePackage{fontspec}
\else
\RequirePackage{graphicx}
\fi
%    \end{macrocode}
%
% \Emo's options also have dependencies, with \textsf{extra} requiring the
% |xspace| package and \textsf{index} requiring the |index| package:
%    \begin{macrocode}
\ifemo@extra
\RequirePackage{xspace}
\fi
\ifemo@indexing
\RequirePackage{index}
\fi
%    \end{macrocode}
%
% \iffalse

%% =================
%%  (2) Emoji Table
%% =================
% \fi
%
% That's it for the prelude.
%    \begin{macrocode}
%</prelude>
%    \end{macrocode}
%
%
% \subsection{The Emoji Table}
%
% For each emoji with a PDF graphic in the |emo-graphics| directory, a macro
% named |\emo@emoji@|\meta{emoji-name} expands to its Unicode sequence. With
% over 3,000 distinct emoji in Unicode 15, \Emo\ relies on a Python script for
% populating the graphics directory and writing the table to the |emo.table.dtx|
% file. In the generated package file \texttt{\jobname.sty}, the contents of the
% table file come right after the prelude.
%
% Since there are over 3,000 distinct emoji, the emoji table may be quite large.
% It definitely isn't very interesting or clever. Consequently, it is elided
% from the documentation.
%
% The rest of the package follows after the table.
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% \iffalse

%% ==============================
%%  (3) Internal & Public Macros
%% ==============================
% \fi
%
% \subsection{Internal Macros}
%
% \begin{macro}{emo@error@fg}
% \begin{macro}{emo@error@bg}
% \begin{macro}{emo@error}
% Define two colors and a function that uses the two colors for formatting an
% attention-grabbing error message. If you use an invalid emoji name and
% overlook the warning in the console, you \emph{will} notice the error messsage
% in the document, \emo{error}, thusly formatted.
%    \begin{macrocode}
\definecolor{emo@error@fg}{rgb}{1,1,1}
\definecolor{emo@error@bg}{rgb}{.6824,.0863,.0863}
\def\emo@error#1{%
    \colorbox{emo@error@bg}{%
        \textcolor{emo@error@fg}{%
            \textsf{Bad} \texttt{\textbackslash emo\{#1\}}%
        }%
    }%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{emo@ifdef}
% Validate the emoji name given as first argument. The macro expands to the
% second argument if the name is valid and an error message otherwise. Its
% implementation relies on the |emo@emoji| table.
%    \begin{macrocode}
\def\emo@ifdef#1#2{%
    \ifcsname emo@emoji@#1\endcsname#2\else%
        \PackageWarning{emo}{Unknown emoji name in `\string\emo{#1}'}%
        \emo@error{#1}%
    \fi%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{emo@index}
% If indexing is enabled, record the use of an emoji. Otherwise, do nothing.
%    \begin{macrocode}
\ifemo@indexing
\newindex{emo}{edx}{end}{Emoji Index}
\def\emo@index#1{\index[emo]{#1}}
\else
\def\emo@index#1{}
\fi
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Public Macros}
%
% \begin{macro}{emo}
% Emit the named color emoji. Both the font-based |lualatex| and the
% graphics-based fallback version validate the emoji name and then invoke the
% |\emo@index| macro. The |lualatex| version next switches to the Noto color
% emoji font followed by the named emoji sequence in Unicode from the
% |eme@emoji@| table, all within a group. The fallback version instead includes
% the named PDF graphic, suitably scaled.
%    \begin{macrocode}
\ifluatex
\newfontface\emo@font[Renderer=Harfbuzz]{NotoColorEmoji.ttf}
\newcommand\emo[1]{%
    \emo@ifdef{#1}{%
        \emo@index{#1}%
        {\emo@font\csname emo@emoji@#1\endcsname}%
    }%
}
\else
\newcommand\emo[1]{%
    \emo@ifdef{#1}{%
        \emo@index{#1}%
        \raisebox{-0.2ex}{\includegraphics[height=1em]{./emo-graphics/#1}}%
    }%
}
\fi
%    \end{macrocode}
% \end{macro}

% \begin{macro}{lingchi}
% \begin{macro}{YHWH}
% The definitions for the optional |\lingchi| and |\YHWH| macros follow from
% that of |\emo|, except that
% \begin{inlinenum}
% \item there are no arguments to validate and hence no equivalent to
%     |\emo@ifdef|;
% \item Hebrew is written right-to-left and hence |\YHWH| requires a
%     |\textdir TRT|;
% \item subsequent space should be preserved and hence the macros end
%     with |\xspace|.
% \end{inlinenum}
% While it would be nice to use Unicode inside the explicit groups, doing so
% breaks the package documentation. So |\char| it is.
%    \begin{macrocode}
\ifemo@extra
\ifluatex
\newfontface\emo@chinese{NotoSansSC-Regular.otf}
\newfontface\emo@hebrew{NotoSerifHebrew-Regular.ttf}
\newcommand\lingchi{%
    \emo@index{lingchi}%
    \begingroup\emo@chinese \char"51CC\char"9072\endgroup%
    \xspace}
\newcommand\YHWH{%
    \emo@index{YHWH}%
    \begingroup\textdir TRT\emo@hebrew \char"5D9\char"5D4\char"5D5\char"5D4\endgroup%
    \xspace}
\else
\newcommand\lingchi{%
    \emo@index{lingchi}%
    \raisebox{-0.2ex}{\includegraphics[height=1em]{./emo-graphics/lingchi}}%
    \xspace}
\newcommand\YHWH{%
    \emo@index{YHWH}%
    \raisebox{-0.2ex}{\includegraphics[height=1em]{./emo-graphics/YHWH}}%
    \xspace}
\fi
\fi
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% Et voil\`a!
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \Finale
%
% \immediate\write16{ }
% \immediate\write16{‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêemo‚ä∞}
% \immediate\write16{‚ïë}
% \immediate\write16{‚ïë To extract the embedded build.sh, emo.ins, emo.sty,}
% \immediate\write16{‚ïë and README.md, run:}
% \immediate\write16{‚ïë}
% \immediate\write16{‚ïë\space\space\space\space\space $ pdflatex emo.dtx}
% \immediate\write16{‚ïë}
% \immediate\write16{‚ïë}
% \immediate\write16{‚ïë To build emo.sty's documentation, run:}
% \immediate\write16{‚ïë}
% \immediate\write16{‚ïë\space\space\space\space\space $ source build.sh}
% \immediate\write16{‚ïë}
% \immediate\write16{‚ïë}
% \immediate\write16{‚ïë To use emo.sty, put the package file, the PDF files}
% \immediate\write16{‚ïë in the emo-graphics directory, and both Noto fonts}
% \immediate\write16{‚ïë somewhere LaTeX can find them. Your project directory}
% \immediate\write16{‚ïë will do just fine.}
% \immediate\write16{‚ïë}
% \immediate\write16{‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêemo‚ä∞}
% \immediate\write16{ }
