% \iffalse meta-comment
%
% emo•ji for all (LaTeX engines)
% (C) Copyright 2023 by Robert Grimm
% Released under LPPL v1.3c or later
% <https://github.com/apparebit/emo>
%
% \fi
% ^^A ----------------------------------------------------------------------------------
% \iffalse
%<*scaffold>
\iffalse
%</scaffold>
% ======================================================================================
%<*readme>
# emo•ji for all (LaTeX engines)

This package defines the `\emo{<emoji-name>}` macro for including color emoji in
a document no matter the LaTeX engine. It uses the Noto color emoji font if the
engine supports doing so and falls back onto PDF graphics otherwise. In either
case, `\emo{desert-island}` results in 🏝 and `\emo{parrot}` results in 🦜. Emo
may come in particularly handy when dealing with academic publishers that
provide only minimal support for non-Latin scripts (cough,
[ACM](https://www.acm.org), cough).

Emo's source repository is <https://github.com/apparebit/emo>. It also is
available [through CTAN](https://ctan.org/pkg/emo). Emo supports conversion to
HTML with [LaTeXML](https://github.com/brucemiller/LaTeXML) or
[TeX4ht](https://tug.org/tex4ht/). When using the latter tool, please be sure to
use |make4ht -l| as invocation.


## Package Options

When emo is used with the `extra` option, this package also defines the
`\lingchi` and `\YHWH` macros for 凌遲 and יהוה, respectively. Both macros
preserve a subsequent space as space, no backslash needed.

When used with the `index` option, this package also emits a raw index entry for
each use of an emoji into an emo index or `.edx` file.


## Installation

To **extract files** embedded in [emo.dtx](emo.dtx), run `pdftex emo.dtx`. Note
that plain old `tex` won't do, since it mangles this README. `pdflatex` works,
but also generates the package documentation. The embedded files are `build.sh`,
`emo.ins`, `emo.sty`, `emo.sty.ltxml`, `emo-test.cls`, `canary.tex`, `demo.tex`,
and `README.md`.

To **build the documentation** embedded in `emo.dtx`, run `source build.sh`. The
shell script invokes `pdflatex emo.dtx` thrice and `makeindex` once each for the
change and the symbol indices, resulting in [emo.pdf](emo.pdf).

To **configure the emoji**, run `python3 config/emo.py` with appropriate
arguments. The [package documentation](emo.pdf) explains the configuration tool
in detail, but you may find the `-h` for help option sufficient to get started.

To **install this package**, place `emo.def`, `emo.sty`, `emo.sty.ltxml`,
`emo-lingchi.ttf`, and the `emo-graphics` directory with the fallback PDF files
somewhere where LaTeX can find them. In a pinch, your project directory will do.


## Supported Emoji

By default, emo supports only a few emoji, ordered by Unicode codepoints:

1️⃣ ☣️ ⚖️ ✅ ✔️ ❌ ➕ 🇪🇺 🉐 🌁 🌍 🎉 🏛️ 🏝️ 🏟️ 🏳️‍🌈 🏷️ 🐤 👁️ 👥 💥 💱 💾 📈 📐 📟 🔍
🕵️ 🗑️ 😡 🛑 🤖 🤝 🤦 🤪 🤯 🥺 🦜 🧑‍⚖️ 🧻 🧾

Their names are keycap-one, biohazard, balance-scale, check-mark-button,
check-mark, cross-mark, plus, eu, japanese-bargain-button, foggy,
globe-africa-europe, party-popper, classical-building, desert-island, stadium,
rainbow-flag, label, baby-chick, eye, busts, collision, currency-exchange,
floppy-disk, chart-increasing, triangular-ruler, pager, loupe-left, detective,
wastebasket, enraged-face, stop-sign, robot, handshake, person-facepalming,
zany-face, exploding-head, pleading-face, parrot, judge, roll-of-paper, and
receipt.

The [package's documentation](emo.pdf) explains the underlying naming scheme and
also how to reconfigure which emoji are supported. The [emo.py](config/emo.py)
script takes care of the heavy lifting during reconfiguration, converting SVG
into PDF files and generating an updated `emo.def` file.


## Copyright and Licensing

This package combines code written in LaTeX, Python, and Perl with Unicode data
about emoji as well as graphics and fonts derived from Google's Noto fonts. As a
result, a number of different licenses apply, all of which are [OSI
approved](https://opensource.org/licenses/) and non-copyleft:

  * This package's [LaTeX code](emo.dtx) is © Copyright 2023 by Robert Grimm and
    has been released under the [LPPL
    v1.3c](https://www.latex-project.org/lppl/lppl-1-3c/) or later.
  * The [emo.py](config/emo.py) configuration script also is © Copyright 2023 by
    Robert Grimm but has been released under the [Apache 2.0
    license](https://www.apache.org/licenses/LICENSE-2.0).
  * The [emoji-test.txt](config/emoji-test.txt) configuration file is a data
    file from [Unicode TR-51](https://unicode.org/reports/tr51/) and hence
    subject to the [Unicode License](https://www.unicode.org/license.txt).
  * The `emo-lingchi.ttf` font is a two-glyph subset of the serif traditional
    Chinese version of Google's [Noto
    fonts](https://github.com/notofonts/noto-cjk) and hence subject to the [SIL
    Open Font License v1.1](https://scripts.sil.org/ofl).
  * The PDF graphics in the `emo-graphics` directory are derived from the
    sources for [Noto's color emoji](https://github.com/googlefonts/noto-emoji)
    and hence subject to the Apache 2.0 license.

%</readme>
% --------------------------------------------------------------------------------------
%<*buildscript>
# Test emo
pdflatex -jobname=pdftex-canary canary
xelatex -jobname=xetex-canary canary
lualatex -jobname=luatex-canary canary
pdfunite pdftex-canary.pdf xetex-canary.pdf luatex-canary.pdf canary.pdf

# LaTeXML: --includestyles handles emo-test class
latexmlc --includestyles --dest=demo-latexml.html demo.tex

# Remove run date comment and footer. The latter is just plain tacky.
sed -i '' '/^<!--Generated on /d' ./demo-latexml.html
sed -i '' '/^<div class="ltx_page_logo/d' ./demo-latexml.html

# TeX4ht: -l is necessary for selecting LuaTeX engine
make4ht -l -j demo-tex4ht demo.tex

# Document emo
pdflatex emo.dtx
makeindex -s gind.ist -o emo.ind emo.idx
makeindex -s gglo.ist -o emo.gls emo.glo
pdflatex emo.dtx
pdflatex emo.dtx
%</buildscript>
% ======================================================================================
%<*scaffold>
\fi
\def\nameofplainTeX{plain}
\ifx\fmtname\nameofplainTeX\else
    \expandafter\begingroup
\fi
%</scaffold>
% --------------------------------------------------------------------------------------
%<*install>
\input docstrip.tex
\keepsilent
\askforoverwritefalse
\preamble

emo•ji for all (LaTeX engines)
(C) Copyright 2023 by Robert Grimm
Released under LPPL v1.3c or later
<https://github.com/apparebit/emo>

\endpreamble
\usedir{tex/latex/emo}
\generate{
    \file{\jobname.sty}{\from{\jobname.dtx}{package}}}
\generate{
    \nopreamble\nopostamble
    \file{\jobname.sty.ltxml}{\from{\jobname.dtx}{latexml-binding}}}
%</install>
%<install>\endbatchfile
% --------------------------------------------------------------------------------------
%<*scaffold>
\usedir{source/latex/emo}
\generate{\file{\jobname.ins}{\from{\jobname.dtx}{install}}}
\generate{\file{emo-test.cls}{\from{\jobname.dtx}{testing}}}
\generate{\file{canary.tex}{\from{\jobname.dtx}{canary}}}
\generate{\file{demo.tex}{\from{\jobname.dtx}{oneliner}}}
\nopreamble\nopostamble
\usedir{source/latex/emo}
\generate{\file{build.sh}{\from{\jobname.dtx}{buildscript}}}
\usedir{doc/latex/emo}
\generate{\file{README.md}{\from{\jobname.dtx}{readme}}}
\ifx\fmtname\nameofplainTeX
    \expandafter\endbatchfile
\else
    \expandafter\endgroup
\fi
%</scaffold>
% ======================================================================================
% See https://tug.org/TUGboat/tb29-2/tb92pakin.pdf.
%<*scaffold>
\ProvidesFile{emo.dtx}
%</scaffold>
%<package>\NeedsTeXFormat{LaTeX2e}
%<package>\ProvidesPackage{emo}
%<*scaffold,package>
    [2023/05/01 v0.5 emo•ji for all (LaTeX engines)]
%</scaffold,package>
% ======================================================================================
%<*driver>
\PassOptionsToPackage{utf8}{inputenc}
\documentclass{ltxdoc}
% Override the default \small, which looks odd typeset in Inconsolata.
\renewcommand{\MacroFont}{\normalsize\ttfamily}
\usepackage[extra]{\jobname}
\usepackage{enumitem}
\usepackage{parskip}
\usepackage{inconsolata}

% Use BlackFoundry's Inria <https://tug.org/FontCatalogue/inriaserifregular/>
\usepackage[T1]{fontenc}
\usepackage[lining]{InriaSerif}
\renewcommand*\oldstylenums[1]{{\fontfamily{InriaSerif-OsF}\selectfont #1}}
\let\oldnormalfont\normalfont
\def\normalfont{\oldnormalfont\mdseries}

\usepackage{xcolor}
\usepackage{hyperref}
\definecolor{spot}{HTML}{353598}
\hypersetup{allcolors=spot}
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
    \DocInput{\jobname.dtx}
\end{document}
%</driver>
% ======================================================================================
% \fi
%
% \changes{0.1}{}{Make initial release}
% \changes{0.2}{}{Prefix font and graphic files with ``{\tt emo-}''}
% \changes{0.2}{}{Support {\tt pdftex} for extracting {\tt emo.dtx}}
% \changes{0.3}{}{Support TeX4ht for conversion to HTML}
% \changes{0.4}{}{Automate testing across engines with {\tt canary.tex}}
% \changes{0.5}{}{Use LaTeX hooks for handling engines and options}
%
% \GetFileInfo{\jobname.dtx}
%
% \DoNotIndex{\{,\},\x,\\}
% \DoNotIndex{\begingroup,\char,\csname,\def}
% \DoNotIndex{\else,\endcsname,\endgroup,\expandafter}
% \DoNotIndex{\fi,\ifcsname,\ifluatex,\index}
% \DoNotIndex{\newcommand,\newif,\newindex}
% \DoNotIndex{\relax,\string,\textbackslash,\textsf,\texttt}
%
% \newlist{inlinenum}{enumerate*}{1}
% \setlist[inlinenum]{label=(\alph{inlinenumi})}
% \newenvironment{verbatimish}{%
%     \ttfamily%
%     \obeylines%
%     \obeyspaces%
%     \vspace{\the\parskip}%
%     \setlength{\parskip}{0pt}%
%     \setlength{\parindent}{1em}%
% }{}
%
% \title{emo•ji for all\\(LaTeX engines)}
% \author{\href{https://apparebit.com}{Robert Grimm}}
% \date{Version \fileversion\ (\filedate)}
%
% \maketitle
%
% \begin{abstract}
% \noindent{}Emo implements the |\emo|\marg{emoji-name} command for including
% color emoji such as |\emo{desert-island}| for \emo{desert-island} or
% |\emo{parrot}| for \emo{parrot} in your documents independent of LaTeX engine.
% The implementation uses the Noto color emoji font if the engine supports it
% and includes PDF graphics otherwise. It also supports conversion to HTML with
% either LaTeXML or TeX4ht. Next, PDF graphics are automatically derived from
% Noto's SVG sources, so the visual appearance is very similar. The source
% repository is at \url{https://github.com/apparebit/emo}. Emo may come in
% particularly handy when dealing with academic publishers that provide only
% minimal support for non-Latin scripts (cough,
% \href{https://authors.acm.org/proceedings/production-information/accepted-latex-packages}{ACM},
% cough).
% \end{abstract}
%
% \tableofcontents
%
%
% ^^A ==================================================================================
% \section{Installation}
%
% The emo package is available through its
% \href{https://github.com/apparebit/emo}{source repository} or through
% \href{https://ctan.org/pkg/emo}{CTAN}. Installation is fairly
% straightforward, though it does involve a lot more files than usual.
%
% \begin{enumerate}
% \item Start by extracting this package's files from |emo.dtx| by running:
% \begin{verbatimish}
%     \$ pdftex emo.dtx
% \end{verbatimish}
% Do \emph{not} use |tex|; it mangles the embedded |README.md|. |pdflatex| also
% extracts the files and then builds the documentation. Embedded files are
% |build.sh|, |emo.ins|, |emo.sty|, |emo.sty.ltxml|, |emo-test.cls|,
% |canary.tex|, |demo.tex|, and |README.md|. Extraction will overwrite existing
% files with the same name without asking.
%
% \item Build the package documentation with change and symbol indices by
% running:
% \begin{verbatimish}
%      \$ source build.sh
% \end{verbatimish}
% The shell script serves three purposes: (1) To test emo across engines, (2) to
% illustrate conversion to HTML, and (3) to generate the user documentation. In
% more detail it processes the tests in |canary.tex| and |emo-test.cls| with
% |pdflatex|, |xelatex|, and |lualatex|, combining the test results into
% |canary.pdf|. It also processes |demo.tex| with LaTeXML and TeX4ht to generate
% |demo-latexml.html| and |demo-tex4ht.html|, respectively. Finally, it
% processes |emo.dtx| with |pdflatex| and |makeindex| to produce documentation
% in |emo.pdf|.
%
% \item Get started reconfiguring supported emoji by running:
% \begin{verbatimish}
%     \$ python config/emo.py -h
% \end{verbatimish}
% For more detailed instructions, see \S\ref{sec:config} below.
%
% \item Put the following files somewhere LaTeX can find them. In a pinch, your
% current project's directory will do. However, emo's installation potentially
% comprises thousands of files. So, you probably want to use a dedicated
% directory and add that to the search path for LaTeX, e.g., by setting the
% |TEXINPUTS| environment variable.
% \begin{enumerate}
% \item |emo.sty| with the package implementation;
% \item |emo.sty.ltxml| with the binding for
%     \href{https://github.com/brucemiller/LaTeXML}{LaTeXML};
% \item |emo.def| with the emoji table;
% \item |emo-lingchi.ttf| with the two glyphs for |\lingchi|;
% \item |emo-graphics| with the fallback PDF graphics.
% \end{enumerate}
% TeX Live requires that each package's files have unique names. For that
% reason, the PDF graphics in the |emo-graphics| directory start with the |emo-|
% prefix as well.
%
% \end{enumerate}
%
% When running on the LuaLaTeX engine, the emo package also uses the Noto color
% emoji (|NotoColorEmoji.ttf|) and Linux Libertine (|LinLibertine_R.otf|) fonts,
% with the latter used for rendering |\YHWH| only. Neither file is included with
% emo's distribution, since both of them are distributed with major TeX
% distributions already. If they are not included with your LaTeX distribution,
% you can find them on CTAN. The |emo-lingchi.ttf| font distributed with emo is
% a two glyph subset of |NotoSerifTC-Regular.otf|, i.e., the traditional Chinese
% version of Noto serif.
%
%
% ^^A ==================================================================================
% \section{Usage}
%
% As usual, you declare your document's dependency on emo with
% |\usepackage{emo}|. In addition to the unadorned form, emo takes up to two
% options:
% \begin{description}
% \item[extra] Also define the |\lingchi| and |\YHWH| macros, which produce
%     \lingchi\ and \YHWH.
% \item[index] Create an emoji index tagged |emo| with the |.edx| extension for
%     the raw index and the |.end| extension for the processed index. This
%     option relies on the |index| package, generates the raw |.edx| file,
%     but does not build or use the processed index.
% \end{description}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{One Main Macro}
% \DescribeMacro{\emo}
% An |\emo|\marg{emoji-name} invocation expands to the named emoji. For
% LuaLaTeX, it uses the Noto color emoji font. For all other engines, it uses
% PDF graphics. That way, |\emo{desert-island}| results in~\emo{desert-island}
% and |\emo{parrot}| results in~\emo{parrot}.
%
% Since LaTeX tends to produce a lot of command line noise about underfull boxes
% and loaded fonts, it's a easy to miss meaningful warnings. For that reason,
% |\emo| expands to an attention-seeking error message upon undefined emoji
% names. For example, |\emo{boo}| produces \emo{boo}.
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsubsection{Emoji Names}
%
% With some exceptions, emo's names for emoji are automatically derived from
% their Unicode names, with letters converted to lowercase, punctuation such as
% commas, colons, quotes, and parentheses stripped, and interword spaces
% replaced by dashes. Furthermore, instead of the rather verbose
% |dark-skin-tone|, |medium-dark-skin-tone|, etc modifiers, emo
% uses the more succinct |darkest|, |darker|, |medium|, |lighter|, and
% |lightest|.
%
% For some emoji names, emo goes further by hard-coding shorter names. Those
% names are listed in Table~\ref{tab:special-names}.
%
% \begin{table}
% \caption{Exceptional emoji names}
% \label{tab:special-names}
% \small\vspace{1em}
% \begin{tabular}{ll}
% \textbf{Transformed Unicode Name} & \textbf{Emo Replacement Name} \\ \hline
% |a-button-blood-type| & |a-button| \\
% |ab-button-blood-type| & |ab-button| \\
% |b-button-blood-type| & |b-button| \\
% |o-button-blood-type| & |o-button| \\
% |bust-in-silhouette| & |bust| \\
% |busts-in-silhouette| & |busts| \\
% |flag-european-union| & |eu| \\
% |globe-showing-americas| & |globe-americas| \\
% |globe-showing-asia-australia| & |globe-asia-australia| \\
% |globe-showing-europe-africa| & |globe-africa-europe| \\
% |hear-no-evil-monkey| & |hear-no-evil| \\
% |index-pointing-at-the-viewer| & |index-pointing-at-viewer| \\
% |index-pointing-at-the-viewer-darkest| & |index-pointing-at-viewer-darkest| \\
% |index-pointing-at-the-viewer-darker| & |index-pointing-at-viewer-darker| \\
% |index-pointing-at-the-viewer-medium| & |index-pointing-at-viewer-medium| \\
% |index-pointing-at-the-viewer-lighter| & |index-pointing-at-viewer-lighter| \\
% |index-pointing-at-the-viewer-lightest| & |index-pointing-at-viewer-lightest| \\
% |keycap-*| & |keycap-star| \\
% |keycap-#| & |keycap-hash| \\
% |keycap-0| & |keycap-zero| \\
% |keycap-1| & |keycap-one| \\
% |keycap-2| & |keycap-two| \\
% |keycap-3| & |keycap-three| \\
% |keycap-4| & |keycap-four| \\
% |keycap-5| & |keycap-five| \\
% |keycap-6| & |keycap-six| \\
% |keycap-7| & |keycap-seven| \\
% |keycap-8| & |keycap-eight| \\
% |keycap-9| & |keycap-nine| \\
% |keycap-10| & |keycap-ten| \\
% |magnifying-glass-tilted-left| & |loupe-left| \\
% |magnifying-glass-tilted-right| & |loupe-right| \\
% |palm-down-hand| & |palm-down| \\
% |palm-down-hand-darkest| & |palm-down-darkest| \\
% |palm-down-hand-darker| & |palm-down-darker| \\
% |palm-down-hand-medium| & |palm-down-medium| \\
% |palm-down-hand-lighter| & |palm-down-lighter| \\
% |palm-down-hand-lightest| & |palm-down-lightest| \\
% |palm-up-hand| & |palm-up| \\
% |palm-up-hand-darkest| & |palm-up-darkest| \\
% |palm-up-hand-darker| & |palm-up-darker| \\
% |palm-up-hand-medium| & |palm-up-medium| \\
% |palm-up-hand-lighter| & |palm-up-lighter| \\
% |palm-up-hand-lightest| & |palm-up-lightest| \\
% |rolling-on-the-floor-laughing| & |rofl| \\
% |see-no-evil-monkey| & |see-no-evil| \\
% |speak-no-evil-monkey| & |speak-no-evil| \\
% \end{tabular}
% \end{table}
%
% Emo's |emo.def| contains the names and codepoints of all currently supported
% emoji. Emo's distribution also includes the |emoji-test.txt| file, which is
% part of \href{https://unicode.org/reports/tr51/}{Unicode TR-51} and contains
% the names and codepoints of all \emph{potentially} supported emoji, i.e., all
% emoji. It further organizes emoji into groups and subgroups, with the current
% (sub)group being the one named on the closest line above the emoji that starts
% with |# |(|sub|)|group:|. As described in the next section, the group and
% subgroup names can be used during configuration for concisely naming a large
% number of emoji.
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Two Extra Macros}
%
% \DescribeMacro{\lingchi}
% \DescribeMacro{\YHWH}
% The |\lingchi| and |\YHWH| macros take no arguments and produce \lingchi\ and
% \YHWH. They are only available if emo is used with the |extra| option.
% The former renders the Chinese term for ``death by a thousand cuts.'' While
% originally an execution method, the term applies to surprisingly many software
% systems as well. The latter produces the Tetragrammaton, the Hebrew name for
% God. Observant Jews never utter what's written, not even in their thoughts,
% substituting Adonai (``My Lord''), Elohim (``God''), or HaShem (``The Name'')
% instead. In my mind, that nicely mirrors the very incomprehensibility of
% \YHWH. Both macros preserve a subsequent space as space, no backslash needed.
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Conversion to HTML}
%
% Emo supports conversion to HTML with either
% \href{https://github.com/brucemiller/LaTeXML}{LaTeXML} or
% \href{https://tug.org/tex4ht/}{TeX4ht}. LaTeXML support is implemented by a
% separate ``binding'' against LaTeXML's Perl API. I chronicled my exploration
% of suitable options leading to that less than ideal choice in a
% \href{https://github.com/brucemiller/LaTeXML/issues/2063}{GitHub issue}.
% TeX4ht support is implemented by the emo package itself. It requires
% processing with LuaLaTeX e.g., by passing |-l| to the |make4ht| tool.
%
%
% ^^A ==================================================================================
% \section{Configuration}
% \label{sec:config}
%
% Emo's implementation is actually split over two files: |emo.sty| is extracted
% from |emo.dtx| and defines the substance of the package, its options, its
% helper macros, and the user-visible |\emo|, |\lingchi|, and |\YHWH| macros.
% Currently supported emoji are defined by the emoji table in the second file,
% |emo.def|. For every supported emoji, the file contains a command
% |\emo@emoji@|\meta{emoji-name} with the emoji's codepoints as value.
%
% Configuration automates the regeneration of the emoji table for arbitrary
% numbers of emoji. |config/emo.py| is the script and |config/emoji-test.txt| is
% the list of all emoji from the Unicode standard.
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Running the Configuration Script}
%
% To update emo's configuration, invoke the |config/emo.py| script:
% \begin{verbatimish}
%     \$ python3 config/emo.py \meta{selector} \meta{selector} $\ldots$
% \end{verbatimish}
%
% Each selector may be:
% \begin{itemize}
% \item The literal |ALL| (case-sensitive) for \emph{all} emoji.
% \item Name of a group in |emoji-test.txt| lowercased and with spaces replaced
%     by dashes and ampersand |&| replaced by an |and|; e.g.,
%     |travel-and-places|.
% \item Name of a group, a double colon |::|, and name of a subgroup, again
%     lowercased and with spaces replaced by dashes and |&| by an |and|; e.g.,
%     |travel-and-places::place-geographic|.
% \item The name of an emoji; e.g., |desert-island|.
% \end{itemize}
% For conjunctive group names, such as ``Smileys \& Emotion'' (|emoji-test.txt|)
% or ``smileys-and-emotion'' (|emo.py|), the configuration script also accepts
% either of the two nouns as a shortcut, e.g., ``smileys'' or ``emotion.''
%
% For data safety, |emo.py| does not overwrite PDF graphics and hence can only
% \emph{add} emoji to the configuration. To remove emoji, simply remove their
% PDF graphics from |emo-graphics| and then run |emo.py| without selector
% arguments, which updates the emoji table accordingly.
%
% |emo.py| effectively treats |emoji-test.txt| as registry of all emoji and the
% filenames of PDF graphics in |emo-graphics| as emo's current inventory. For
% all emoji named by selector arguments but not in the inventory, |emo.py|
% converts the SVG source graphic from the Noto color emoji sources to a PDF
% file and deletes the |/Page| |/Group| object from the the PDF again, since
% that object trips up |pdflatex|. And yeah, |emo.py| automatically downloads
% the Noto color emoji sources if necessary.
%
%
% ^^A ==================================================================================
% \section{Copyright and Licensing}
%
% Since emo's distribution includes not only LaTeX code but also a substantial
% Python script, Unicode data about emoji, as well as graphics and fonts derived
% from Google's Noto project, a number of different licenses apply. All of them
% are \href{https://opensource.org/licenses/}{OSI approved} and non-copyleft:
% \begin{itemize}
% \item This package's LaTeX and also Perl code extracted from |emo.dtx|
%     is © Copyright 2023 by Robert Grimm and has been released
%     under the \href{https://www.latex-project.org/lppl/lppl-1-3c/}{LPPL v1.3c}
%     or later.
% \item The |config/emo.py| script also is © Copyright 2023 by Robert Grimm but
%     has been released under the
%     \href{https://www.apache.org/licenses/LICENSE-2.0}{Apache 2.0 license}.
% \item The [config/emoji-test.txt] configuration file is a data file from
%     \href{https://unicode.org/reports/tr51/}{Unicode TR-51} and hence subject
%     to the \href{https://www.unicode.org/license.txt}{Unicode License}.
% \item The |emo-lingchi.ttf| font is a two-glyph subset of the traditional
%     Chinese version of Google's
%     \href{https://github.com/notofonts/noto-cjk}{Noto serif} and hence subject
%     to the \href{https://scripts.sil.org/ofl}{SIL Open Font License v1.1}.
% \item The PDF graphics in the |emo-graphics| directory are derived from the
%     sources for \href{https://github.com/googlefonts/noto-emoji}{Noto's color
%     emoji} and hence subject to the Apache 2.0 license.
% \end{itemize}
%
%
% \StopEventually{^^A
%     \PrintChanges^^A
%     \setcounter{IndexColumns}{2}^^A
%     \columnsep = 20pt^^A
%     \PrintIndex}
%
%
% ^^A ==================================================================================
% \section{Implementation}
%
% Let's get started on emo's implementation:
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% Except, that implementation started near the top of this |emo.dtx| file, well
% before the documentation's preamble. For completeness, here is the package
% declaration again:
%
% \begin{verbatimish}
% |\NeedsTeXFormat{LaTeX2e}|
% |\ProvidesPackage{emo}|
% |    |[\filedate\space\fileversion\space\fileinfo]
% \end{verbatimish}
%
% Unfortunately, emo's version number appears in triplicate in this file, which
% makes cutting a release a little more tricky than it should be. Alas, the
% above, faux package declaration is not one of those repeat offenders. Really.
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Package Options}
%
% \begin{macro}{\ifemo@extra}
% \begin{macro}{\ifemo@index}
% \begin{macro}{\ifemo@debug}
% \changes{0.4}{}{Add {\tt debug} option for drawing boundary boxes}
% Define a conditional flag for each package option.
%    \begin{macrocode}
\newif\ifemo@extra\emo@extrafalse
\newif\ifemo@indexing\emo@indexingfalse
\newif\ifemo@debug\emo@debugfalse
%    \end{macrocode}
%
% Wire each conditional to the package option and then process them all.
%    \begin{macrocode}
\DeclareOption{extra}{\emo@extratrue}
\DeclareOption{index}{\emo@indexingtrue}
\DeclareOption{debug}{\emo@debugtrue}
\ProcessOptions\relax
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Package Dependencies and Backend Selection}
%
% Require |inputenc| to declare this file's character encoding as UTF-8. XeTeX
% and LuaTeX already use that encoding by default and hence this line is
% redundant. But pdfTeX originates from darker, pre-Unicode times and thus needs
% to be told. Though thankfully, it does support the encoding by now.
%    \begin{macrocode}
\RequirePackage[utf8]{inputenc}
%    \end{macrocode}
%
% \begin{macro}{\ifemo@use@unicode}
% \begin{macro}{\ifemo@use@font}
% \begin{macro}{\ifemo@use@pdf}
% \changes{0.3}{}{Make backend support scalable through symbolic names}
% Define a conditional flag for each major backend configuration. They are
% \emph{not} orthogonal: |\ifemo@use@unicode| and |\ifemo@use@pdf| are mutually
% exclusive and determine whether emo generates Unicode text or PDF graphics.
% For |\ifemo@use@font| to be enabled, |\ifemo@use@unicode| must already be
% enabled as well.
%    \begin{macrocode}
\newif\ifemo@use@unicode
\newif\ifemo@use@font
\newif\ifemo@use@pdf
%    \end{macrocode}
%
% Inspect the current engine via |iftex| and configure the just defined backend
% flags.
%    \begin{macrocode}
\RequirePackage{iftex}
\ifdefined\HCode
    \emo@use@unicodetrue
\else
\ifluatex
    \emo@use@unicodetrue
    \emo@use@fonttrue
\else
    \emo@use@pdftrue
\fi
\fi
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% Require |xcolor| for formatting highly visible error messages within the
% generated document. Always including another package that is only used when
% there are errors is not ideal. But I couldn't get on-demand package loading to
% work. So we have to eagerly require the package.
%    \begin{macrocode}
\RequirePackage{xcolor}
%    \end{macrocode}
%
% Each of the three remaining requirements either depends on a package option or
% on the backend.
%    \begin{macrocode}
\ifemo@indexing
    \RequirePackage{index}
\fi
\ifemo@use@font
    \RequirePackage{fontspec}
\fi
\ifemo@use@pdf
    \RequirePackage{graphicx}
\fi
%    \end{macrocode}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{The Emoji Table}
%
% \begin{macro}{\emo@emoji@name}
% \changes{0.3}{}{Include {\tt\textbackslash lingchi} and {\tt\textbackslash YWHW}
% as necessary}
% The emoji table defines an entry for each enabled emoji and, if the |extra|
% option is present, also for the two extra macros. Each entry maps the name of
% the emoji to its Unicode sequence. For example, the control sequence
% |\emo@emoji@parrot| has \emo{parrot} as its value. Since there are over 3,000
% distinct emoji in Unicode 15, emo does not support all of them out of the box.
% Rather it relies on a Python script for populating the |emo-graphics|
% directory with the necessary PDF files and writing the table to
% \texttt{\jobname.def}. This nicely keeps code that may change after
% installation, the emoji table, from code that doesn't, the package
% implementation itself.
%    \begin{macrocode}
\input{emo.def}
%    \end{macrocode}
% \end{macro}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Internal Macros}
%
% \begin{macro}{\emo@error@fg}
% \begin{macro}{\emo@error@bg}
% \begin{macro}{\emo@error}
% Define two colors and a function that uses the two colors for formatting an
% attention-grabbing error message. If you use an invalid emoji name and
% overlook the warning in the console, you \emph{will} notice the error messsage
% in the document thusly formatted.
%    \begin{macrocode}
\definecolor{emo@error@fg}{rgb}{1,1,1}
\definecolor{emo@error@bg}{rgb}{.6824,.0863,.0863}
\def\emo@error#1{%
    \colorbox{emo@error@bg}{%
        \textcolor{emo@error@fg}{%
            \textsf{Bad} \texttt{\textbackslash emo\{#1\}}%
        }%
    }%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\emo@ifdef}
% Validate the emoji name given as first argument. The macro expands to the
% second argument if the name is valid and an error message otherwise. Its
% implementation relies on the emoji table as the primary source of truth.
%    \begin{macrocode}
\def\emo@ifdef#1#2{%
    \ifcsname emo@emoji@#1\endcsname#2\else%
        \PackageWarning{emo}{Unknown emoji name in `\string\emo{#1}'}%
        \emo@error{#1}%
    \fi%
}
%    \end{macrocode}
% \end{macro}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{User Macros and Hooks}
%
% Between versions 0.1 and 0.4, the implementation evolved considerably. In
% versions 0.1 and 0.2, I focused mostly on getting emo working across all three
% major LaTeX engines. I also tried to manage variability by introducing a
% number of internal macros, with some of them defined at least twice to account
% for features being present or not. Hence it wasn't surprising when I also
% ended up implementing each of the three user macros |\emo|, |\lingchi|, and
% |\YHWH| twice, with one version selecting an appropriate font and then
% emitting Unicode and the second, fallback version using PDF graphics.
%
% For version 0.3, I added support for TeX4ht as the second option for
% converting to HTML. That meant adding a third backend, which emits Unicode
% only, \emph{without} font selection. I also integrated the Unicode code points
% for |\lingchi| and |\YHWH| into the emoji table and abstracted over the three
% macros' content versus surrounding grouping, indexing, and error checking
% logic. As a result, the implementation appeared better organized and simpler
% despite supporting more feature variability.
%
% With version 0.4, I introduced the |debug| option to emo, which increased
% implementation complexity again. Now, each macro of the three macros required
% an optional wrapper with the framed box visualizing the emoji's bounding box.
% Just as my discontent with the implementation grew, my work on a bespoke
% testing class also significantly deepened my TeX-fu and so I started looking
% out for a more ergonomic approach to emo's implementation as well. I now
% believe I found that approach thanks to
% \href{http://tug.ctan.org/macros/latex/base/lthooks-code.pdf}{LaTeX hooks}.
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsubsection{A Skeleton of Hooks}
%
% \begin{macro}{emo/render/before}
% \begin{macro}{emo/render/emoji}
% \begin{macro}{emo/render/chinese}
% \begin{macro}{emo/render/hebrew}
% \begin{macro}{emo/render/content}
% \begin{macro}{emo/render/after}
% To define emo's hooks, notice that, in addition to entity name, Unicode code
% points, and PDF graphics, the only other major source of variability is the
% font selection or lack thereof. In fact, each of the three macros necessarily
% must have its own font selection logic and hence dedicated hook, since each
% macro produces text in a different ``language'' and writing system. Otherwise,
% all three macros have the exact same structure and hooks: A group combines the
% |emo/render/emoji|, |emo/render/chinese|, or |emo/render/hebrew| hook for font
% selection with the |emo/render/content| hook for the actual text. The
% |emo/render/before| and |emo/render/after| hooks enable aspect-oriented
% functionality, such as indexing or logging.
%    \begin{macrocode}
\NewHook{emo/render/before}
\NewHook{emo/render/emoji}
\ifemo@extra
\NewHook{emo/render/chinese}
\NewHook{emo/render/hebrew}
\fi
\NewHook{emo/render/content}
\NewReversedHook{emo/render/after}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\emo@makecommand}
% \begin{macro}{\emo@key}
% \begin{macro}{\emo@value}
% With the hooks defined, it's fairly straight-forward to write a macro that
% invokes those hooks in the prescribed order. Since the font selection hook
% differs between the three macros, it is the only argument to
% |\emo@makecommand|. Hooks have no arguments beyond their labels. So to make
% the current key and, after the group has been rendered, the corresponding
% value available in hooks, the macro below introduces a naming convention, with
% |\emo@key| providing the name across all hooks and |\emo@value| providing the
% rendered content to the |emo/render/after| hook. The latter can modify the
% macro's result by redefining |\emo@value|. In fact, as you can see shortly,
% that's just how the |debug| package option is implemented.
%    \begin{macrocode}
\def\emo@makecommand#1{%
    \noexpand\def\noexpand\emo@key{##1}%
    \noexpand\emo@ifdef{##1}{%
        \noexpand\UseHook{emo/render/before}%
        \noexpand\def\noexpand\emo@value{%
            \noexpand\begingroup%
            \noexpand#1%
            \noexpand\UseHook{emo/render/content}%
            \noexpand\endgroup%
        }%
        \noexpand\UseHook{emo/render/after}%
        \noexpand\emo@value%
    }%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsubsection{The User Macros}
%
% \begin{macro}{\emo}
% Render the named emoji either as Unicode or as a PDF graphic. To do so,
% instantiate the skeleton with the font selection hook for emoji. We eagerly
% evaluate the instantiation of the skeleton with |\edef|, so that it forms a
% coherent macro body. At the same time, to ensure that eager evaluation doesn't
% fail, the definition of |\emo@makecommand| liberally uses |\noexpand|.
%    \begin{macrocode}
\edef\emo#1{\emo@makecommand{\UseHook{emo/render/emoji}}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lingchi}
% \changes{0.3}{}{Build on {\tt\textbackslash emo} by default}
% \changes{0.5}{}{Drop use of trailing {\tt xspace}}
% \begin{macro}{\YHWH}
% \changes{0.3}{}{Build on {\tt\textbackslash emo} by default}
% \changes{0.5}{}{Drop use of trailing {\tt xspace}}
% The definitions for the two extra macros aren't much more involved. Though
% they do require a helper macro each, since the user-facing macros do not
% accept arguments.
%    \begin{macrocode}
\ifemo@extra
\edef\@lingchi#1{\emo@makecommand{\UseHook{emo/render/chinese}}}
\edef\@YHWH#1{\emo@makecommand{\UseHook{emo/render/hebrew}}}
\def\lingchi{\@lingchi{lingchi}}
\def\YHWH{\@YHWH{YHWH}}
\fi
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsubsection{Activating the Hooks}
%
% So far, the three user-facing macros have little impact beyond generating
% empty groups. We change that by activating the hooks as required by the
% current backend configuration and package options. The neat part about this
% approach is that we don't need to do anything if an option is disabled.
%
% If the |index| option is enabled, create the necessary index and emit entries
% through the |emo/render/before| hook.
%    \begin{macrocode}
\ifemo@indexing
\newindex{emo}{edx}{end}{Emoji Index}
\def\emo@index#1{\index[emo]{#1}}
\AddToHook{emo/render/before}{\expandafter\emo@index\expandafter{\emo@key}}
\fi
%    \end{macrocode}
%
% Next, if the backend uses fonts, set up font selection in the corresponding
% hooks. We only activate the |emo/render/chinese| and |emo/render/hebrew| hooks
% if the |extra| package option is enabled. Note that since Hebrew is written
% right-to-left, the font selection hook also set the text direction. This is
% safe to do because font selection and content are always enclosed in a group.
%    \begin{macrocode}
\ifemo@use@font
\newfontface\emo@font@emoji[Renderer=Harfbuzz]{NotoColorEmoji.ttf}
\AddToHook{emo/render/emoji}{\emo@font@emoji}
\ifemo@extra
\newfontface\emo@font@chinese{emo-lingchi.ttf}
\newfontface\emo@font@hebrew{LinLibertine_R.otf}
\AddToHook{emo/render/chinese}{\emo@font@chinese}
\AddToHook{emo/render/hebrew}{\emo@font@hebrew\textdir TRT}
\fi
\fi
%    \end{macrocode}
%
% Next, we activate the |emo/render/content| hook to either emit Unicode code
% points or PDF graphics.
%    \begin{macrocode}
\ifemo@use@unicode
\AddToHook{emo/render/content}{\csname emo@emoji@\emo@key\endcsname}
\fi
\ifemo@use@pdf
\AddToHook{emo/render/content}{%
    \raisebox{-0.2ex}{\includegraphics[height=1em]{emo-graphics/emo-\emo@key}}%
}
\fi
%    \end{macrocode}
%
% Finally, if the |debug| package option is enabled, we wrap the rendered
% content in a frame.
%    \begin{macrocode}
\ifemo@debug
\AddToHook{emo/render/after}{%
    \let\emo@realvalue\emo@value%
    \def\emo@value{\fbox{\emo@realvalue}}%
}
\fi
%    \end{macrocode}
%
% Et voil\`a. That's it!
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
%
% ^^A ==================================================================================
% \section{LaTeXML Binding}
% \changes{0.2}{}{Add LaTeXML binding for conversion to HTML}
%
% ^^A Reset line number counter
% \makeatletter
% \c@CodelineNo 0
% \makeatother
%
% To support conversion from LaTeX to HTML, emo includes a so-called binding for
% \href{https://github.com/brucemiller/LaTeXML}{LaTeXML}. It effectively is a
% (much simplified) re-implementation of emo's core functionality, only written
% in Perl against LaTeXML's API. The binding ignores the |index| option
% and does not perform error checking on emoji names. If either is important to
% you, please compile the document with LaTeX first. Furthermore, the binding
% emits necessary Unicode codepoints only, without font annotations. If you want
% to specify fonts, please use a CSS fontstack.
%
% Asking package authors to reimplement their packages for LaTeXML seems
% unreasonable to me. It leads to code duplication and places the maintenance
% burden on package authors. Yet, right after announcing emo, the question of
% LaTeXML support came up. LaTeXML includes the |latexml.sty| package, which
% defines |\iflatexml|. I would have used that command to make the three-line
% change to |emo.sty| necessary to support LaTeXML, except |latexml.sty|
% contains lots of other stuff that isn't needed. Always loading lots of macros
% only to detect LaTeXML slows down compilation and wastes memory. Since
% reimplementing |\iflatexml| would require a binding anyways, I just wrote a
% minimal binding. As I said, LaTeXML's approach is broken.
%
% With that out of the way, let's get started:
%    \begin{macrocode}
%<*latexml-binding>
%    \end{macrocode}
%
% The binding starts with an explicit preamble because |docstrip| does not
% alllow for a redefinition of the starting characters of a line comment. It is
% followed by the Perl dependencies.
%    \begin{macrocode}
## emo's LaTeXML binding.
## (C) 2023 by Robert Grimm.
## Released under LPPL v1.3c or later.
use strict;
use warnings;
use LaTeXML::Package;
%    \end{macrocode}
%
% \begin{macro}{\ifemo@extra}
% Next, we use raw TeX to declare the LaTeX package and define the |emo@extra|
% conditional. There is no need to define the |emo@indexing| conditional, since
% it corresponds to the unsupported |index| option.
%    \begin{macrocode}
RawTeX(<<'EOTeX');
\ProvidesPackage{emo}
    [2023/05/01 v0.5 emo•ji for all (LaTeX engines)]
\newif\ifemo@extra\emo@extrafalse
EOTeX
%    \end{macrocode}
% \end{macro}
%
% Option prcessing is almost trivial:
%    \begin{macrocode}
DeclareOption('extra', '\emo@extratrue');
DeclareOption('index', '');
DeclareOption('debug', '');
ProcessOptions();
%    \end{macrocode}
%
% \begin{macro}{\emo@emoji@name}
% \begin{macro}{\emo}
% Just like the actual package implementation, the LaTeXML binding reads the
% emoji table from |emo.def|. Similar to the actual implementation of the |\emo|
% macro when running under LuaLaTeX, the binding expands the named entry from
% the emoji table, producing the emoji's Unicode codepoints.
%    \begin{macrocode}
InputDefinitions('emo', type => 'def', noltxml => 1);
DefMacro('\emo{}', '\csname emo@emoji@#1\endcsname');
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\lingchi}
% \begin{macro}{\YHWH}
% If the |emo@extra| conditional is enabled, provide minimal re-definitions of
% the |\lingchi| and |\YHWH| macros. Both simply expand to the necessary Unicode
% codepoints.
%    \begin{macrocode}
if (IfCondition(T_CS('\ifemo@extra'))) {
    DefMacro('\lingchi', "\x{51cc}\x{9072}");
    DefMacro('\YHWH', "\x{05D9}\x{05D4}\x{05D5}\x{05D4}");
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% That's it for the binding, too.
%    \begin{macrocode}
%</latexml-binding>
%    \end{macrocode}
%
%
% ^^A ==================================================================================
% \section{Testing Emo}
% \changes{0.4}{}{Introduce a simple unit testing framework}
%
% As emo's tagline so loudly proclaims, this package is intended to enable emoji
% across all major LaTeX engines. That requires testing across all major LaTeX
% engines. The necessary macros and documents follow.
%
% Alas, we first start an always false conditional to prevent execution of this
% code while generating the documentation.
%    \begin{macrocode}
%<*scaffold>
\iffalse
%</scaffold>
%    \end{macrocode}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Test Class}
%
% ^^A Reset line number counter
% \makeatletter
% \c@CodelineNo 0
% \makeatother
%
%    \begin{macrocode}
%<*testing>
%    \end{macrocode}
%
% The |emo-test| class contains all the code for testing |emo|.
%    \begin{macrocode}
\NeedsTeXFormat{LaTeX2e}
\ProvidesClass{emo-test}[2023/05/01 v0.5 Testing emo]
%    \end{macrocode}
%
% |emo-test| builds on |standalone| so that the resulting PDF has just the size
% of the output (plus some small margin). Its |verbose| option results in
% additional output from |\checkwidth| to help debug failing tests. All other
% options are passed down to the |standalone| class. Consider the
% |lua-visual-debug| package for verbose mode under LuaTeX.
%    \begin{macrocode}
\newif\ifemo@verbose@canary\emo@verbose@canaryfalse
\DeclareOption{verbose}{\emo@verbose@canarytrue}
\DeclareOption*{\PassOptionsToClass{\CurrentOption}{standalone}}
\ProcessOptions\relax
\LoadClass[border=10pt, varwidth=6in]{standalone}
%    \end{macrocode}
%
% We require |emo| since it is being tested, |iftex| for determining the LaTeX
% engine, and |xcolor| for appearances sake. This class reuses several of emo's
% internal macros, including |\ifemo@use@unicode|, |\ifemo@use@font|, and
% |\ifemo@use@pdf| for backend selection as well as |\emo@font@emoji|,
% |\emo@font@chinese|, and |\emo@font@hebrew| for font selection.
%    \begin{macrocode}
\RequirePackage[extra]{emo}
\RequirePackage{iftex}
\RequirePackage{xcolor}
%    \end{macrocode}
%
% When requiring Libertinus and Inconsolata, relative order matters and does
% so depending on laTeX engine.
%    \begin{macrocode}
\iftutex
\RequirePackage{fontspec}
\RequirePackage{libertinus}
\setmonofont{inconsolata}
\else
\RequirePackage{libertinus}
\RequirePackage{inconsolata}
\fi
%    \end{macrocode}
%
% \begin{macro}{\enginename}
% I couldn't find an existing macro that provides the desired functionality, so
% we gotta round up the usual suspects...
%    \begin{macrocode}
\ifxetex
\def\enginename{XeTeX}
\else
\ifluatex
\def\enginename{LuaTeX}
\else
\ifpdftex
\def\enginename{pdfTeX}
\else
\def\enginename{unknown engine}
\fi
\fi
\fi
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{emo@canary@frameinner}
% \begin{macro}{emo@canary@frameouter}
% \begin{macro}{emo@canary@background}
% Define frame and background colors for boundary boxes of sample text.
%    \begin{macrocode}
\definecolor{emo@canary@frameinner}{HTML}{636366}
\definecolor{emo@canary@frameouter}{HTML}{48484A}
\definecolor{emo@canary@background}{HTML}{E5E5EA}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% Adjust settings for |\fcolorbox| so that it serves as bounding box.
%    \begin{macrocode}
\setlength{\fboxrule}{0.5pt}
\setlength{\fboxsep}{0pt}
%    \end{macrocode}
%
% \begin{macro}{\emo@nobox}
% \begin{macro}{\emo@wordbox}
% \begin{macro}{\emo@linebox}
% The sample text may or may not show bounding boxens for words and emoji. It
% always shows the bounding box for the entire line.
%    \begin{macrocode}
\newcommand\emo@nobox[1]{#1}
\newcommand\emo@wordbox[1]{%
    \fcolorbox{emo@canary@frameinner}{white}{#1}}
\newcommand\emo@linebox[1]{%
    \fcolorbox{emo@canary@frameouter}{emo@canary@background}{#1}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\sampletext}
% Show a single line of text that makes use of emo's three macros. To help
% identify incorrect font metrics, spurious whitespace, and other issues, show
% the line's bounding box and, for the starred version, the bounding boxes for
% words and emoji, too.
%    \begin{macrocode}
\def\@sampletext#1{%
    \emo@linebox{%
        #1{It's} #1{\lingchi}:
        #1{Please}, #1{\YHWH}, #1{have} #1{mercy}
        #1{\emo{pleading-face}}!%
    }%
    \vspace{1ex}%
}
\newcommand*\sampletext{%
    \@ifstar{\@sampletext{\emo@wordbox}}{\@sampletext{\emo@nobox}}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\emo@canary@actual}
% \begin{macro}{\emo@canary@expected}
% Validating emo's macros turned out to be a bit trickier than I had expected.
% The obvious approach, fully expanding the macros and then comparing the
% result, doesn't work. TeX does support eager expansion via, for example,
% |\expandafter| and |\edef|. But it does so only for macros that expand to text
% but not boxes, graphics, and so on.
%
% ^^A https://tex.stackexchange.com/questions/67192/using-qstest-to-implement-unit-tests
%
% Instead, we need to take a sneakier approach: Generate a box with the macro
% invocation and another box with the expected result and then compare the
% widths of the two boxes. While that is an incomplete comparison and hence
% cannot detect all bugs, it \emph{can} detect any bug where the macro's output
% is shorter or longer than expected. That conveniently includes whitespace,
% which is one of the bigger dangers for regressions.
%
% We get started on that testing strategy by defining two box registers.
%    \begin{macrocode}
\newsavebox{\emo@canary@actual}
\newsavebox{\emo@canary@expected}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\checkwidth}
% Before version 0.5, |\lingchi| and |\YHWH| relied on |xspace| to avoid any
% trailing backslashes. Now that all three user macros share the same code,
% implementing that feature would require another hook. So I dropped it. Alas,
% before version 0.5, the presence of |xspace| meant that both macros were
% context-sensitive. To ensure meaningful test results, |\checkwidth| fixed the
% context by following macro output with a period. The period remains even if
% |xspace| does not.
%
% Even though |\checkwidth| only tests three macros and two of them take no
% arguments, the test macro still needs five arguments to cover all variability:
% \begin{enumerate}
% \item name of macro being tested;
% \item macro invocation being tested;
% \item name of font variable used in LuaLaTeX's output;
% \item Unicode code sequence in LuaLaTeX's output;
% \item file name for fallback PDF graphic without ``|emo-|'' prefix.
% \end{enumerate}
% The third and fourth arguments are separate because the font variable only
% exists when running under LuaLaTeX.
%    \begin{macrocode}
\newcommand\checkwidth[5]{%
    \sbox\emo@canary@actual{#2.}%
    \ifemo@use@font%
        \sbox\emo@canary@expected{%
            \begingroup\csname emo@font@#3\endcsname #4\endgroup.}%
    \else%
    \ifemo@use@unicode%
        \sbox\emo@canary@expected{\begingroup #4\endgroup.}%
    \else%
        \sbox\emo@canary@expected{%
            \raisebox{-0.2ex}{%
                \includegraphics[height=1em]{emo-graphics/emo-#5}}.}%
    \fi%
    \fi%
    \ifemo@verbose@canary%
        \fbox{\usebox{\emo@canary@actual}}\space%
        \fbox{\usebox{\emo@canary@expected}}\space%
    \fi%
    \def\macroname{\texttt{\char`\\#1}}%
    \ifdim\wd\emo@canary@actual=\wd\emo@canary@expected%
        \mbox{\macroname{} \emo{check-mark-button}}%
    \else%
        \edef\emo@actual{\the\wd\emo@canary@actual}%
        \edef\emo@expected{\the\wd\emo@canary@expected}%
        \mbox{\macroname{} \emo{cross-mark} \emo@actual{} \emo@expected}%
    \fi%
}
%    \end{macrocode}
% \end{macro}
%
% Use small gap between paragra[phs instead of indentation.
%    \begin{macrocode}
\setlength\parindent{0pt}
\setlength{\parskip}{1ex}
%    \end{macrocode}
%
% That's it for emo's testing class.
%    \begin{macrocode}
%</testing>
%    \end{macrocode}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Test Runner and Report}
%
% ^^A Reset line number counter
% \makeatletter
% \c@CodelineNo 0
% \makeatother
%
%    \begin{macrocode}
%<*canary>
%    \end{macrocode}
%
% Each test report identifies the LaTeX engine and then shows the results of the
% width tests for emo's three user-visible macros. If a test passes, the output
% only contains the macro name and a \emo{check-mark-button} check mark. If a
% test fails, the output contains the macro name, the divergent box widths, and
% a \emo{cross-mark} cross mark. In the latter case, the width test results
% spill into the next line (at the least).
%    \begin{macrocode}
\documentclass{emo-test}
\begin{document}
\Huge
\enginename: {\Large Width of
\checkwidth{emo}{\emo{robot}}{emoji}{\char"1F916}{robot},
\checkwidth{lingchi}{\lingchi}{chinese}{\char"51CC\char"9072}{lingchi},
\checkwidth{YHWH}{\YHWH}{hebrew}{%
    \csname textdir\endcsname TRT\char"5D9\char"5D4\char"5D5\char"5D4}{YHWH}}
\vspace{1ex}\par
%    \end{macrocode}
%
% Next is the sample text, first with and then without boundary boxes for words
% and emoji.
%    \begin{macrocode}
\sampletext*\par\sampletext
\end{document}
%    \end{macrocode}
%
% That's it for the tests and report.
%    \begin{macrocode}
%</canary>
%    \end{macrocode}
%
%
% ^^A ----------------------------------------------------------------------------------
% \subsection{Simple Test Document}
%
% ^^A Reset line number counter
% \makeatletter
% \c@CodelineNo 0
% \makeatother
%
%    \begin{macrocode}
%<*oneliner>
%    \end{macrocode}
%
% Not much to see here besides one line of content.s
%    \begin{macrocode}
\documentclass{emo-test}
\begin{document}
\Huge\sampletext
\end{document}
%    \end{macrocode}
%
% It's a wrap \emo{zany-face}
%    \begin{macrocode}
%</oneliner>
%    \end{macrocode}
%
%
% \Finale
